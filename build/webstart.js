(()=>{"use strict";var t={n:e=>{var i=e&&e.__esModule?()=>e.default:()=>e;return t.d(i,{a:i}),i},d:(e,i)=>{for(var r in i)t.o(i,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:i[r]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e)};const e=wabt;var i=t.n(e);const r=1024;let n=0;const s=new WeakMap;class O{constructor({deserialize:t}={}){this.id=n++,this.deserialize=t||(()=>{throw new Error("This node type doesn't define a deserialize function")})}static string(){return new O({deserialize:t=>t})}static number(){return new O({deserialize:Number})}static flag(){return new O({deserialize:()=>!0})}set(t,e){return t[this.id]=e,t}add(t){return"function"!=typeof t&&(t=o.match(t)),e=>{let i=t(e);return void 0===i?null:[this,i]}}}O.closedBy=new O({deserialize:t=>t.split(" ")}),O.openedBy=new O({deserialize:t=>t.split(" ")}),O.group=new O({deserialize:t=>t.split(" ")});const a=Object.create(null);class o{constructor(t,e,i,r=0){this.name=t,this.props=e,this.id=i,this.flags=r}static define(t){let e=t.props&&t.props.length?Object.create(null):a,i=(t.top?1:0)|(t.skipped?2:0)|(t.error?4:0)|(null==t.name?8:0),r=new o(t.name||"",e,t.id,i);if(t.props)for(let i of t.props)Array.isArray(i)||(i=i(r)),i&&i[0].set(e,i[1]);return r}prop(t){return this.props[t.id]}get isTop(){return(1&this.flags)>0}get isSkipped(){return(2&this.flags)>0}get isError(){return(4&this.flags)>0}get isAnonymous(){return(8&this.flags)>0}is(t){if("string"==typeof t){if(this.name==t)return!0;let e=this.prop(O.group);return!!e&&e.indexOf(t)>-1}return this.id==t}static match(t){let e=Object.create(null);for(let i in t)for(let r of i.split(" "))e[r]=t[i];return t=>{for(let i=t.prop(O.group),r=-1;r<(i?i.length:0);r++){let n=e[r<0?t.name:i[r]];if(n)return n}}}}o.none=new o("",Object.create(null),0,8);class l{constructor(t){this.types=t;for(let e=0;e<t.length;e++)if(t[e].id!=e)throw new RangeError("Node type ids should correspond to array positions when creating a node set")}extend(...t){let e=[];for(let i of this.types){let r=null;for(let e of t){let t=e(i);t&&(r||(r=Object.assign({},i.props)),t[0].set(r,t[1]))}e.push(r?new o(i.name,r,i.id,i.flags):i)}return new l(e)}}class f{constructor(t,e,i,r){this.type=t,this.children=e,this.positions=i,this.length=r}toString(){let t=this.children.map((t=>t.toString())).join();return this.type.name?(/\W/.test(this.type.name)&&!this.type.isError?JSON.stringify(this.type.name):this.type.name)+(t.length?"("+t+")":""):t}cursor(t,e=0){let i=null!=t&&s.get(this)||this.topNode,r=new d(i);return null!=t&&(r.moveTo(t,e),s.set(this,r._tree)),r}fullCursor(){return new d(this.topNode,!0)}get topNode(){return new u(this,0,0,null)}resolve(t,e=0){return this.cursor(t,e).node}iterate(t){let{enter:e,leave:i,from:r=0,to:n=this.length}=t;for(let t=this.cursor();;){let s=!1;if(t.from<=n&&t.to>=r&&(t.type.isAnonymous||!1!==e(t.type,t.from,t.to))){if(t.firstChild())continue;t.type.isAnonymous||(s=!0)}for(;s&&i&&i(t.type,t.from,t.to),s=t.type.isAnonymous,!t.nextSibling();){if(!t.parent())return;s=!0}}}balance(t=r){return this.children.length<=g?this:m(this.type,o.none,this.children,this.positions,0,this.children.length,0,t,this.length)}static build(t){return function(t){var e;let{buffer:i,nodeSet:n,topID:s=0,maxBufferLength:O=r,reused:a=[],minRepeatType:l=n.types.length}=t,u=Array.isArray(i)?new $(i,i.length):i,c=n.types;function p(t,e,i,r,s){let{id:d,start:S,end:$,size:x}=u;for(;d==s;)u.next(),({id:d,start:S,end:$,size:x}=u);let y=S-t;if(x<0)return i.push(a[d]),r.push(y),void u.next();let b,P,L=c[d];if($-S<=O&&(P=function(t,e){let i=u.fork(),r=0,n=0,s=0,a=i.end-O,o={size:0,start:0,skip:0};t:for(let O=i.pos-t;i.pos>O;){if(i.id==e){o.size=r,o.start=n,o.skip=s,s+=4,r+=4,i.next();continue}let t=i.size,f=i.pos-t;if(t<0||f<O||i.start<a)break;let h=i.id>=l?4:0,u=i.start;for(i.next();i.pos>f;){if(i.size<0)break t;i.id>=l&&(h+=4),i.next()}n=u,r+=t,s+=h}return(e<0||r==t)&&(o.size=r,o.start=n,o.skip=s),o.size>4?o:void 0}(u.pos-e,s))){let e=new Uint16Array(P.size-P.skip),i=u.pos-P.size,r=e.length;for(;u.pos>i;)r=Q(P.start,e,r,s);b=new h(e,$-P.start,n,s<0?o.none:c[s]),y=P.start-t}else{let t=u.pos-x;u.next();let e=[],i=[],r=d>=l?d:-1;for(;u.pos>t;)p(S,t,e,i,r);e.reverse(),i.reverse(),b=r>-1&&e.length>g?m(L,L,e,i,0,e.length,0,O,$-S):new f(L,e,i,$-S)}i.push(b),r.push(y)}function Q(t,e,i,r){let{id:n,start:s,end:O,size:a}=u;if(u.next(),n==r)return i;let o=i;if(a>4){let n=u.pos-(a-4);for(;u.pos>n;)i=Q(t,e,i,r)}return n<l&&(e[--i]=o,e[--i]=O-t,e[--i]=s-t,e[--i]=n),i}let d=[],S=[];for(;u.pos>0;)p(t.start||0,0,d,S,-1);let x=null!==(e=t.length)&&void 0!==e?e:d.length?S[0]+d[0].length:0;return new f(c[s],d.reverse(),S.reverse(),x)}(t)}}f.empty=new f(o.none,[],[],0);class h{constructor(t,e,i,r=o.none){this.buffer=t,this.length=e,this.set=i,this.type=r}toString(){let t=[];for(let e=0;e<this.buffer.length;)t.push(this.childString(e)),e=this.buffer[e+3];return t.join(",")}childString(t){let e=this.buffer[t],i=this.buffer[t+3],r=this.set.types[e],n=r.name;if(/\W/.test(n)&&!r.isError&&(n=JSON.stringify(n)),i==(t+=4))return n;let s=[];for(;t<i;)s.push(this.childString(t)),t=this.buffer[t+3];return n+"("+s.join(",")+")"}findChild(t,e,i,r){let{buffer:n}=this,s=-1;for(let O=t;O!=e;O=n[O+3])if(-1e8!=r){let t=n[O+1],e=n[O+2];if(i>0){if(e>r&&(s=O),e>r)break}else if(t<r&&(s=O),e>=r)break}else if(s=O,i>0)break;return s}}class u{constructor(t,e,i,r){this.node=t,this.from=e,this.index=i,this._parent=r}get type(){return this.node.type}get name(){return this.node.type.name}get to(){return this.from+this.node.length}nextChild(t,e,i,r=!1){for(let n=this;;){for(let{children:s,positions:O}=n.node,a=e>0?s.length:-1;t!=a;t+=e){let a=s[t],o=O[t]+n.from;if(-1e8==i||!(e<0?o>=i:o+a.length<=i))if(a instanceof h){let r=a.findChild(0,a.buffer.length,e,-1e8==i?-1e8:i-o);if(r>-1)return new Q(new p(n,a,t,o),null,r)}else if(r||!a.type.isAnonymous||S(a)){let s=new u(a,o,t,n);return r||!s.type.isAnonymous?s:s.nextChild(e<0?a.children.length-1:0,e,i)}}if(r||!n.type.isAnonymous)return null;if(t=n.index+e,n=n._parent,!n)return null}}get firstChild(){return this.nextChild(0,1,-1e8)}get lastChild(){return this.nextChild(this.node.children.length-1,-1,-1e8)}childAfter(t){return this.nextChild(0,1,t)}childBefore(t){return this.nextChild(this.node.children.length-1,-1,t)}nextSignificantParent(){let t=this;for(;t.type.isAnonymous&&t._parent;)t=t._parent;return t}get parent(){return this._parent?this._parent.nextSignificantParent():null}get nextSibling(){return this._parent?this._parent.nextChild(this.index+1,1,-1):null}get prevSibling(){return this._parent?this._parent.nextChild(this.index-1,-1,-1):null}get cursor(){return new d(this)}resolve(t,e=0){return this.cursor.moveTo(t,e).node}getChild(t,e=null,i=null){let r=c(this,t,e,i);return r.length?r[0]:null}getChildren(t,e=null,i=null){return c(this,t,e,i)}toString(){return this.node.toString()}}function c(t,e,i,r){let n=t.cursor,s=[];if(!n.firstChild())return s;if(null!=i)for(;!n.type.is(i);)if(!n.nextSibling())return s;for(;;){if(null!=r&&n.type.is(r))return s;if(n.type.is(e)&&s.push(n.node),!n.nextSibling())return null==r?s:[]}}class p{constructor(t,e,i,r){this.parent=t,this.buffer=e,this.index=i,this.start=r}}class Q{constructor(t,e,i){this.context=t,this._parent=e,this.index=i,this.type=t.buffer.set.types[t.buffer.buffer[i]]}get name(){return this.type.name}get from(){return this.context.start+this.context.buffer.buffer[this.index+1]}get to(){return this.context.start+this.context.buffer.buffer[this.index+2]}child(t,e){let{buffer:i}=this.context,r=i.findChild(this.index+4,i.buffer[this.index+3],t,-1e8==e?-1e8:e-this.context.start);return r<0?null:new Q(this.context,this,r)}get firstChild(){return this.child(1,-1e8)}get lastChild(){return this.child(-1,-1e8)}childAfter(t){return this.child(1,t)}childBefore(t){return this.child(-1,t)}get parent(){return this._parent||this.context.parent.nextSignificantParent()}externalSibling(t){return this._parent?null:this.context.parent.nextChild(this.context.index+t,t,-1)}get nextSibling(){let{buffer:t}=this.context,e=t.buffer[this.index+3];return e<(this._parent?t.buffer[this._parent.index+3]:t.buffer.length)?new Q(this.context,this._parent,e):this.externalSibling(1)}get prevSibling(){let{buffer:t}=this.context,e=this._parent?this._parent.index+4:0;return this.index==e?this.externalSibling(-1):new Q(this.context,this._parent,t.findChild(e,this.index,-1,-1e8))}get cursor(){return new d(this)}resolve(t,e=0){return this.cursor.moveTo(t,e).node}toString(){return this.context.buffer.childString(this.index)}getChild(t,e=null,i=null){let r=c(this,t,e,i);return r.length?r[0]:null}getChildren(t,e=null,i=null){return c(this,t,e,i)}}class d{constructor(t,e=!1){if(this.full=e,this.buffer=null,this.stack=[],this.index=0,this.bufferNode=null,t instanceof u)this.yieldNode(t);else{this._tree=t.context.parent,this.buffer=t.context;for(let e=t._parent;e;e=e._parent)this.stack.unshift(e.index);this.bufferNode=t,this.yieldBuf(t.index)}}get name(){return this.type.name}yieldNode(t){return!!t&&(this._tree=t,this.type=t.type,this.from=t.from,this.to=t.to,!0)}yieldBuf(t,e){this.index=t;let{start:i,buffer:r}=this.buffer;return this.type=e||r.set.types[r.buffer[t]],this.from=i+r.buffer[t+1],this.to=i+r.buffer[t+2],!0}yield(t){return!!t&&(t instanceof u?(this.buffer=null,this.yieldNode(t)):(this.buffer=t.context,this.yieldBuf(t.index,t.type)))}toString(){return this.buffer?this.buffer.buffer.childString(this.index):this._tree.toString()}enter(t,e){if(!this.buffer)return this.yield(this._tree.nextChild(t<0?this._tree.node.children.length-1:0,t,e,this.full));let{buffer:i}=this.buffer,r=i.findChild(this.index+4,i.buffer[this.index+3],t,-1e8==e?-1e8:e-this.buffer.start);return!(r<0)&&(this.stack.push(this.index),this.yieldBuf(r))}firstChild(){return this.enter(1,-1e8)}lastChild(){return this.enter(-1,-1e8)}childAfter(t){return this.enter(1,t)}childBefore(t){return this.enter(-1,t)}parent(){if(!this.buffer)return this.yieldNode(this.full?this._tree._parent:this._tree.parent);if(this.stack.length)return this.yieldBuf(this.stack.pop());let t=this.full?this.buffer.parent:this.buffer.parent.nextSignificantParent();return this.buffer=null,this.yieldNode(t)}sibling(t){if(!this.buffer)return!!this._tree._parent&&this.yield(this._tree._parent.nextChild(this._tree.index+t,t,-1e8,this.full));let{buffer:e}=this.buffer,i=this.stack.length-1;if(t<0){let t=i<0?0:this.stack[i]+4;if(this.index!=t)return this.yieldBuf(e.findChild(t,this.index,-1,-1e8))}else{let t=e.buffer[this.index+3];if(t<(i<0?e.buffer.length:e.buffer[this.stack[i]+3]))return this.yieldBuf(t)}return i<0&&this.yield(this.buffer.parent.nextChild(this.buffer.index+t,t,-1e8,this.full))}nextSibling(){return this.sibling(1)}prevSibling(){return this.sibling(-1)}atLastNode(t){let e,i,{buffer:r}=this;if(r){if(t>0){if(this.index<r.buffer.buffer.length)return!1}else for(let t=0;t<this.index;t++)if(r.buffer.buffer[t+3]<this.index)return!1;({index:e,parent:i}=r)}else({index:e,_parent:i}=this._tree);for(;i;({index:e,_parent:i}=i))for(let r=e+t,n=t<0?-1:i.node.children.length;r!=n;r+=t){let t=i.node.children[r];if(this.full||!t.type.isAnonymous||t instanceof h||S(t))return!1}return!0}move(t){if(this.enter(t,-1e8))return!0;for(;;){if(this.sibling(t))return!0;if(this.atLastNode(t)||!this.parent())return!1}}next(){return this.move(1)}prev(){return this.move(-1)}moveTo(t,e=0){for(;(this.from==this.to||(e<1?this.from>=t:this.from>t)||(e>-1?this.to<=t:this.to<t))&&this.parent(););for(;e<0?this.childBefore(t):this.childAfter(t);)if(this.from==this.to||(e<1?this.from>=t:this.from>t)||(e>-1?this.to<=t:this.to<t)){this.parent();break}return this}get node(){if(!this.buffer)return this._tree;let t=this.bufferNode,e=null,i=0;if(t&&t.context==this.buffer)t:for(let r=this.index,n=this.stack.length;n>=0;){for(let s=t;s;s=s._parent)if(s.index==r){if(r==this.index)return s;e=s,i=n+1;break t}r=this.stack[--n]}for(let t=i;t<this.stack.length;t++)e=new Q(this.buffer,e,this.stack[t]);return this.bufferNode=new Q(this.buffer,e,this.index)}get tree(){return this.buffer?null:this._tree.node}}function S(t){return t.children.some((t=>!t.type.isAnonymous||t instanceof h||S(t)))}class ${constructor(t,e){this.buffer=t,this.index=e}get id(){return this.buffer[this.index-4]}get start(){return this.buffer[this.index-3]}get end(){return this.buffer[this.index-2]}get size(){return this.buffer[this.index-1]}get pos(){return this.index}next(){this.index-=4}fork(){return new $(this.buffer,this.index)}}const g=8;function m(t,e,i,r,n,s,O,a,l){let h=[],u=[];if(l<=a)for(let t=n;t<s;t++)h.push(i[t]),u.push(r[t]-O);else{let t=Math.max(a,Math.ceil(1.5*l/g));for(let l=n;l<s;){let n=l,c=r[l];for(l++;l<s&&!(r[l]+i[l].length-c>t);l++);if(l==n+1){let r=i[n];if(r instanceof f&&r.type==e&&r.length>t<<1){for(let t=0;t<r.children.length;t++)h.push(r.children[t]),u.push(r.positions[t]+c-O);continue}h.push(r)}else if(l==n+1)h.push(i[n]);else{let t=m(e,e,i,r,n,l,c,a,r[l-1]+i[l-1].length-c);e==o.none||x(t.children,e)||(t=new f(o.none,t.children,t.positions,t.length)),h.push(t)}u.push(c-O)}}return new f(t,h,u,l)}function x(t,e){for(let i of t)if(i.type==e)return!0;return!1}function y(t){return new b(t)}class b{constructor(t,e=t.length){this.string=t,this.length=e}get(t){return t<0||t>=this.length?-1:this.string.charCodeAt(t)}lineAfter(t){if(t<0)return"";let e=this.string.indexOf("\n",t);return this.string.slice(t,e<0?this.length:Math.min(e,this.length))}read(t,e){return this.string.slice(t,Math.min(this.length,e))}clip(t){return new b(this.string,t)}}class P{constructor(t,e,i,r,n,s,O,a,o){this.cx=t,this.stack=e,this.state=i,this.reducePos=r,this.pos=n,this.score=s,this.buffer=O,this.bufferBase=a,this.parent=o}toString(){return`[${this.stack.filter(((t,e)=>e%3==0)).concat(this.state)}]@${this.pos}${this.score?"!"+this.score:""}`}static start(t,e,i=0){return new P(t,[],e,i,i,0,[],0,null)}pushState(t,e){this.stack.push(this.state,e,this.bufferBase+this.buffer.length),this.state=t}reduce(t){let e=t>>19,i=65535&t,{parser:r}=this.cx,n=r.dynamicPrecedence(i);if(n&&(this.score+=n),0==e)return i<r.minRepeatTerm&&this.storeNode(i,this.reducePos,this.reducePos,4,!0),void this.pushState(r.getGoto(this.state,i,!0),this.reducePos);let s=this.stack.length-3*(e-1)-(262144&t?6:0),O=this.stack[s-2],a=this.stack[s-1],o=this.bufferBase+this.buffer.length-a;if(i<r.minRepeatTerm||131072&t){let t=r.stateFlag(this.state,1)?this.pos:this.reducePos;this.storeNode(i,O,t,o+4,!0)}if(262144&t)this.state=this.stack[s];else{let t=this.stack[s-3];this.state=r.getGoto(t,i,!0)}for(;this.stack.length>s;)this.stack.pop()}storeNode(t,e,i,r=4,n=!1){if(0==t){let t=this,r=this.buffer.length;if(0==r&&t.parent&&(r=t.bufferBase-t.parent.bufferBase,t=t.parent),r>0&&0==t.buffer[r-4]&&t.buffer[r-1]>-1){if(e==i)return;if(t.buffer[r-2]>=e)return void(t.buffer[r-2]=i)}}if(n&&this.pos!=i){let n=this.buffer.length;if(n>0&&0!=this.buffer[n-4])for(;n>0&&this.buffer[n-2]>i;)this.buffer[n]=this.buffer[n-4],this.buffer[n+1]=this.buffer[n-3],this.buffer[n+2]=this.buffer[n-2],this.buffer[n+3]=this.buffer[n-1],n-=4,r>4&&(r-=4);this.buffer[n]=t,this.buffer[n+1]=e,this.buffer[n+2]=i,this.buffer[n+3]=r}else this.buffer.push(t,e,i,r)}shift(t,e,i){if(131072&t)this.pushState(65535&t,this.pos);else if(0==(262144&t)){let r=this.pos,n=t,{parser:s}=this.cx;(i>this.pos||e<=s.maxNode)&&(this.pos=i,s.stateFlag(n,1)||(this.reducePos=i)),this.pushState(n,r),e<=s.maxNode&&this.buffer.push(e,r,i,4)}else e<=this.cx.parser.maxNode&&this.buffer.push(e,this.pos,i,4),this.pos=i}apply(t,e,i){65536&t?this.reduce(t):this.shift(t,e,i)}useNode(t,e){let i=this.cx.reused.length-1;(i<0||this.cx.reused[i]!=t)&&(this.cx.reused.push(t),i++);let r=this.pos;this.reducePos=this.pos=r+t.length,this.pushState(e,r),this.buffer.push(i,r,this.reducePos,-1)}split(){let t=this,e=t.buffer.length;for(;e>0&&t.buffer[e-2]>t.reducePos;)e-=4;let i=t.buffer.slice(e),r=t.bufferBase+e;for(;t&&r==t.bufferBase;)t=t.parent;return new P(this.cx,this.stack.slice(),this.state,this.reducePos,this.pos,this.score,i,r,t)}recoverByDelete(t,e){let i=t<=this.cx.parser.maxNode;i&&this.storeNode(t,this.pos,e),this.storeNode(0,this.pos,e,i?8:4),this.pos=this.reducePos=e,this.score-=200}canShift(t){for(let e=new X(this);;){let i=this.cx.parser.stateSlot(e.top,4)||this.cx.parser.hasAction(e.top,t);if(0==(65536&i))return!0;if(0==i)return!1;e.reduce(i)}}get ruleStart(){for(let t=this.state,e=this.stack.length;;){let i=this.cx.parser.stateSlot(t,5);if(!(65536&i))return 0;if(e-=3*(i>>19),(65535&i)<this.cx.parser.minRepeatTerm)return this.stack[e+1];t=this.stack[e]}}startOf(t,e){let i=this.state,r=this.stack.length,{parser:n}=this.cx;for(;;){let s=n.stateSlot(i,5),O=s>>19,a=65535&s;if(t.indexOf(a)>-1){let t=r-3*(s>>19),i=this.stack[t+1];if(null==e||e>i)return i}if(0==r)return null;0==O?(r-=3,i=this.stack[r]):(r-=3*(O-1),i=n.getGoto(this.stack[r-3],a,!0))}}recoverByInsert(t){if(this.stack.length>=300)return[];let e=this.cx.parser.nextStates(this.state);if(e.length>4||this.stack.length>=120){let i=e.filter((e=>e!=this.state&&this.cx.parser.hasAction(e,t)));if(this.stack.length<120)for(let t=0;i.length<4&&t<e.length;t++)i.indexOf(e[t])<0&&i.push(e[t]);e=i}let i=[];for(let t=0;t<e.length&&i.length<4;t++){if(e[t]==this.state)continue;let r=this.split();r.storeNode(0,r.pos,r.pos,4,!0),r.pushState(e[t],this.pos),r.score-=200,i.push(r)}return i}forceReduce(){let t=this.cx.parser.stateSlot(this.state,5);return 0!=(65536&t)&&(this.cx.parser.validAction(this.state,t)||(this.storeNode(0,this.reducePos,this.reducePos,4,!0),this.score-=100),this.reduce(t),!0)}forceAll(){for(;!this.cx.parser.stateFlag(this.state,2)&&this.forceReduce(););return this}get deadEnd(){if(3!=this.stack.length)return!1;let{parser:t}=this.cx;return 65535==t.data[t.stateSlot(this.state,1)]&&!t.stateSlot(this.state,4)}restart(){this.state=this.stack[0],this.stack.length=0}sameState(t){if(this.state!=t.state||this.stack.length!=t.stack.length)return!1;for(let e=0;e<this.stack.length;e+=3)if(this.stack[e]!=t.stack[e])return!1;return!0}get parser(){return this.cx.parser}dialectEnabled(t){return this.cx.parser.dialect.flags[t]}}var L;!function(t){t[t.Token=200]="Token",t[t.Reduce=100]="Reduce",t[t.MaxNext=4]="MaxNext",t[t.MaxInsertStackDepth=300]="MaxInsertStackDepth",t[t.DampenInsertStackDepth=120]="DampenInsertStackDepth"}(L||(L={}));class X{constructor(t){this.stack=t,this.top=t.state,this.rest=t.stack,this.offset=this.rest.length}reduce(t){let e=65535&t,i=t>>19;0==i?(this.rest==this.stack.stack&&(this.rest=this.rest.slice()),this.rest.push(this.top,0,0),this.offset+=3):this.offset-=3*(i-1);let r=this.stack.cx.parser.getGoto(this.rest[this.offset-3],e,!0);this.top=r}}class U{constructor(t,e,i){this.stack=t,this.pos=e,this.index=i,this.buffer=t.buffer,0==this.index&&this.maybeNext()}static create(t){return new U(t,t.bufferBase+t.buffer.length,t.buffer.length)}maybeNext(){let t=this.stack.parent;null!=t&&(this.index=this.stack.bufferBase-t.bufferBase,this.stack=t,this.buffer=t.buffer)}get id(){return this.buffer[this.index-4]}get start(){return this.buffer[this.index-3]}get end(){return this.buffer[this.index-2]}get size(){return this.buffer[this.index-1]}next(){this.index-=4,this.pos-=4,0==this.index&&this.maybeNext()}fork(){return new U(this.stack,this.pos,this.index)}}class v{constructor(){this.start=-1,this.value=-1,this.end=-1}accept(t,e){this.value=t,this.end=e}}class q{constructor(t,e){this.data=t,this.id=e}token(t,e,i){!function(t,e,i,r,n){let s=0,O=1<<n,a=r.cx.parser.dialect;t:for(let n=i.start;0!=(O&t[s]);){let o=t[s+1];for(let e=s+3;e<o;e+=2)if((t[e+1]&O)>0){let s=t[e];if(a.allows(s)&&(-1==i.value||i.value==s||r.cx.parser.overrides(s,i.value))){i.accept(s,n);break}}let l=e.get(n++);for(let e=0,i=t[s+2];e<i;){let r=e+i>>1,n=o+r+(r<<1),O=t[n],a=t[n+1];if(l<O)i=r;else{if(!(l>=a)){s=t[n+2];continue t}e=r+1}}break}}(this.data,t,e,i,this.id)}}q.prototype.contextual=q.prototype.fallback=q.prototype.extend=!1;class w{constructor(t,e={}){this.token=t,this.contextual=!!e.contextual,this.fallback=!!e.fallback,this.extend=!!e.extend}}function R(t,e=Uint16Array){if("string"!=typeof t)return t;let i=null;for(let r=0,n=0;r<t.length;){let s=0;for(;;){let e=t.charCodeAt(r++),i=!1;if(126==e){s=65535;break}e>=92&&e--,e>=34&&e--;let n=e-32;if(n>=46&&(n-=46,i=!0),s+=n,i)break;s*=46}i?i[n++]=s:i=new e(s)}return i}const k="undefined"!=typeof process&&/\bparse\b/.test(process.env.LOG);let T=null;function _(t,e,i){let r=t.cursor(e);for(;;)if(!(i<0?r.childBefore(e):r.childAfter(e)))for(;;){if((i<0?r.to<=e:r.from>=e)&&!r.type.isError)return i<0?r.to-1:r.from+1;if(i<0?r.prevSibling():r.nextSibling())break;if(!r.parent())return i<0?0:t.length}}class j{constructor(t){this.fragments=t,this.i=0,this.fragment=null,this.safeFrom=-1,this.safeTo=-1,this.trees=[],this.start=[],this.index=[],this.nextFragment()}nextFragment(){let t=this.fragment=this.i==this.fragments.length?null:this.fragments[this.i++];if(t){for(this.safeFrom=t.openStart?_(t.tree,t.from+t.offset,1)-t.offset:t.from,this.safeTo=t.openEnd?_(t.tree,t.to+t.offset,-1)-t.offset:t.to;this.trees.length;)this.trees.pop(),this.start.pop(),this.index.pop();this.trees.push(t.tree),this.start.push(-t.offset),this.index.push(0),this.nextStart=this.safeFrom}else this.nextStart=1e9}nodeAt(t){if(t<this.nextStart)return null;for(;this.fragment&&this.safeTo<=t;)this.nextFragment();if(!this.fragment)return null;for(;;){let e=this.trees.length-1;if(e<0)return this.nextFragment(),null;let i=this.trees[e],r=this.index[e];if(r==i.children.length){this.trees.pop(),this.start.pop(),this.index.pop();continue}let n=i.children[r],s=this.start[e]+i.positions[r];if(s>t)return this.nextStart=s,null;if(s==t&&s+n.length<=this.safeTo)return s==t&&s>=this.safeFrom?n:null;n instanceof h?(this.index[e]++,this.nextStart=s+n.length):(this.index[e]++,s+n.length>=t&&(this.trees.push(n),this.start.push(s),this.index.push(0)))}}}class G extends v{constructor(){super(...arguments),this.extended=-1,this.mask=0}clear(t){this.start=t,this.value=this.extended=-1}}const E=new v;class V{constructor(t){this.tokens=[],this.mainToken=E,this.actions=[],this.tokens=t.tokenizers.map((t=>new G))}getActions(t,e){let i=0,r=null,{parser:n}=t.cx,{tokenizers:s}=n,O=n.stateSlot(t.state,3);for(let n=0;n<s.length;n++){if(0==(1<<n&O))continue;let a=s[n],o=this.tokens[n];if((!r||a.fallback)&&((a.contextual||o.start!=t.pos||o.mask!=O)&&(this.updateCachedToken(o,a,t,e),o.mask=O),0!=o.value)){let e=i;if(o.extended>-1&&(i=this.addActions(t,o.extended,o.end,i)),i=this.addActions(t,o.value,o.end,i),!a.extend&&(r=o,i>e))break}}for(;this.actions.length>i;)this.actions.pop();return r||(r=E,r.start=t.pos,t.pos==e.length?r.accept(t.cx.parser.eofTerm,t.pos):r.accept(0,t.pos+1)),this.mainToken=r,this.actions}updateCachedToken(t,e,i,r){if(t.clear(i.pos),e.token(r,t,i),t.value>-1){let{parser:e}=i.cx;for(let n=0;n<e.specialized.length;n++)if(e.specialized[n]==t.value){let s=e.specializers[n](r.read(t.start,t.end),i);if(s>=0&&i.cx.parser.dialect.allows(s>>1)){0==(1&s)?t.value=s>>1:t.extended=s>>1;break}}}else i.pos==r.length?t.accept(i.cx.parser.eofTerm,i.pos):t.accept(0,i.pos+1)}putAction(t,e,i,r){for(let e=0;e<r;e+=3)if(this.actions[e]==t)return r;return this.actions[r++]=t,this.actions[r++]=e,this.actions[r++]=i,r}addActions(t,e,i,r){let{state:n}=t,{parser:s}=t.cx,{data:O}=s;for(let t=0;t<2;t++)for(let a=s.stateSlot(n,t?2:1);;a+=3){if(65535==O[a]){if(1!=O[a+1]){0==r&&2==O[a+1]&&(r=this.putAction(C(O,a+1),e,i,r));break}a=C(O,a+2)}O[a]==e&&(r=this.putAction(C(O,a+1),e,i,r))}return r}}var W;!function(t){t[t.Distance=5]="Distance",t[t.MaxRemainingPerStep=3]="MaxRemainingPerStep",t[t.MinBufferLengthPrune=200]="MinBufferLengthPrune",t[t.ForceReduceLimit=10]="ForceReduceLimit"}(W||(W={}));class Y{constructor(t,e,i,r){this.parser=t,this.input=e,this.startPos=i,this.context=r,this.pos=0,this.recovering=0,this.nextStackID=9812,this.nested=null,this.nestEnd=0,this.nestWrap=null,this.reused=[],this.tokens=new V(t),this.topTerm=t.top[1],this.stacks=[P.start(this,t.top[0],this.startPos)];let n=null==r?void 0:r.fragments;this.fragments=n&&n.length?new j(n):null}advance(){if(this.nested){let t=this.nested.advance();return this.pos=this.nested.pos,t&&(this.finishNested(this.stacks[0],t),this.nested=null),null}let t,e,i,r=this.stacks,n=this.pos,s=this.stacks=[];for(let O=0;O<r.length;O++){let a,o=r[O];for(;;){if(o.pos>n)s.push(o);else if(a=this.checkNest(o))(!i||i.stack.score<o.score)&&(i=a);else{if(this.advanceStack(o,s,r))continue;{t||(t=[],e=[]),t.push(o);let i=this.tokens.mainToken;e.push(i.value,i.end)}}break}}if(i)return this.startNested(i),null;if(!s.length){let e=t&&function(t){let e=null;for(let i of t)i.pos==i.cx.input.length&&i.cx.parser.stateFlag(i.state,2)&&(!e||e.score<i.score)&&(e=i);return e}(t);if(e)return this.stackToTree(e);if(this.parser.strict)throw k&&t&&console.log("Stuck with token "+this.parser.getName(this.tokens.mainToken.value)),new SyntaxError("No parse at "+n);this.recovering||(this.recovering=5)}if(this.recovering&&t){let i=this.runRecovery(t,e,s);if(i)return this.stackToTree(i.forceAll())}if(this.recovering){let t=1==this.recovering?1:3*this.recovering;if(s.length>t)for(s.sort(((t,e)=>e.score-t.score));s.length>t;)s.pop();s.some((t=>t.reducePos>n))&&this.recovering--}else if(s.length>1)t:for(let t=0;t<s.length-1;t++){let e=s[t];for(let i=t+1;i<s.length;i++){let r=s[i];if(e.sameState(r)||e.buffer.length>200&&r.buffer.length>200){if(!((e.score-r.score||e.buffer.length-r.buffer.length)>0)){s.splice(t--,1);continue t}s.splice(i--,1)}}}this.pos=s[0].pos;for(let t=1;t<s.length;t++)s[t].pos<this.pos&&(this.pos=s[t].pos);return null}advanceStack(t,e,i){let r=t.pos,{input:n,parser:s}=this,O=k?this.stackID(t)+" -> ":"";if(this.fragments)for(let e=this.fragments.nodeAt(r);e;){let i=this.parser.nodeSet.types[e.type.id]==e.type?s.getGoto(t.state,e.type.id):-1;if(i>-1&&e.length)return t.useNode(e,i),k&&console.log(O+this.stackID(t)+` (via reuse of ${s.getName(e.type.id)})`),!0;if(!(e instanceof f)||0==e.children.length||e.positions[0]>0)break;let r=e.children[0];if(!(r instanceof f))break;e=r}let a=s.stateSlot(t.state,4);if(a>0)return t.reduce(a),k&&console.log(O+this.stackID(t)+` (via always-reduce ${s.getName(65535&a)})`),!0;let o=this.tokens.getActions(t,n);for(let n=0;n<o.length;){let a=o[n++],l=o[n++],f=o[n++],h=n==o.length||!i,u=h?t:t.split();if(u.apply(a,l,f),k&&console.log(O+this.stackID(u)+` (via ${0==(65536&a)?"shift":`reduce of ${s.getName(65535&a)}`} for ${s.getName(l)} @ ${r}${u==t?"":", split"})`),h)return!0;u.pos>r?e.push(u):i.push(u)}return!1}advanceFully(t,e){let i=t.pos;for(;;){let r=this.checkNest(t);if(r)return r;if(!this.advanceStack(t,null,null))return!1;if(t.pos>i)return z(t,e),!0}}runRecovery(t,e,i){let r,n=null,s=!1;for(let O=0;O<t.length;O++){let a=t[O],o=e[O<<1],l=e[1+(O<<1)],f=k?this.stackID(a)+" -> ":"";if(a.deadEnd){if(s)continue;s=!0,a.restart(),k&&console.log(f+this.stackID(a)+" (restarted)");let t=this.advanceFully(a,i);if(t){!0!==t&&(r=t);continue}}let h=a.split(),u=f;for(let t=0;h.forceReduce()&&t<10;t++){k&&console.log(u+this.stackID(h)+" (via force-reduce)");let t=this.advanceFully(h,i);if(t){!0!==t&&(r=t);break}k&&(u=this.stackID(h)+" -> ")}for(let t of a.recoverByInsert(o))k&&console.log(f+this.stackID(t)+" (via recover-insert)"),this.advanceFully(t,i);this.input.length>a.pos?(l==a.pos&&(l++,o=0),a.recoverByDelete(o,l),k&&console.log(f+this.stackID(a)+` (via recover-delete ${this.parser.getName(o)})`),z(a,i)):(!n||n.score<a.score)&&(n=a)}if(n)return n;if(r)for(let t of this.stacks)if(t.score>r.stack.score){r=void 0;break}return r&&this.startNested(r),null}forceFinish(){let t=this.stacks[0].split();return this.nested&&this.finishNested(t,this.nested.forceFinish()),this.stackToTree(t.forceAll())}stackToTree(t,e=t.pos){return f.build({buffer:U.create(t),nodeSet:this.parser.nodeSet,topID:this.topTerm,maxBufferLength:this.parser.bufferLength,reused:this.reused,start:this.startPos,length:e-this.startPos,minRepeatType:this.parser.minRepeatTerm})}checkNest(t){let e=this.parser.findNested(t.state);if(!e)return null;let i=e.value;return"function"==typeof i&&(i=i(this.input,t)),i?{stack:t,info:e,spec:i}:null}startNested(t){let{stack:e,info:i,spec:r}=t;this.stacks=[e],this.nestEnd=this.scanForNestEnd(e,i.end,r.filterEnd),this.nestWrap="number"==typeof r.wrapType?this.parser.nodeSet.types[r.wrapType]:r.wrapType||null,r.startParse?this.nested=r.startParse(this.input.clip(this.nestEnd),e.pos,this.context):this.finishNested(e)}scanForNestEnd(t,e,i){for(let r=t.pos;r<this.input.length;r++)if(E.start=r,E.value=-1,e.token(this.input,E,t),E.value>-1&&(!i||i(this.input.read(r,E.end))))return r;return this.input.length}finishNested(t,e){this.nestWrap?e=new f(this.nestWrap,e?[e]:[],e?[0]:[],this.nestEnd-t.pos):e||(e=new f(o.none,[],[],this.nestEnd-t.pos));let i=this.parser.findNested(t.state);t.useNode(e,this.parser.getGoto(t.state,i.placeholder,!0)),k&&console.log(this.stackID(t)+" (via unnest)")}stackID(t){let e=(T||(T=new WeakMap)).get(t);return e||T.set(t,e=String.fromCodePoint(this.nextStackID++)),e+t}}function z(t,e){for(let i=0;i<e.length;i++){let r=e[i];if(r.pos==t.pos&&r.sameState(t))return void(e[i].score<t.score&&(e[i]=t))}e.push(t)}class F{constructor(t,e,i){this.source=t,this.flags=e,this.disabled=i}allows(t){return!this.disabled||0==this.disabled[t]}}class Z{constructor(t){if(this.bufferLength=r,this.strict=!1,this.nextStateCache=[],this.cachedDialect=null,13!=t.version)throw new RangeError(`Parser version (${t.version}) doesn't match runtime version (13)`);let e=R(t.tokenData),i=t.nodeNames.split(" ");this.minRepeatTerm=i.length;for(let e=0;e<t.repeatNodeCount;e++)i.push("");let n=[];for(let t=0;t<i.length;t++)n.push([]);function s(t,e,i){n[t].push([e,e.deserialize(String(i))])}if(t.nodeProps)for(let e of t.nodeProps){let t=e[0];for(let i=1;i<e.length;){let r=e[i++];if(r>=0)s(r,t,e[i++]);else{let n=e[i+-r];for(let O=-r;O>0;O--)s(e[i++],t,n);i++}}}if(this.specialized=new Uint16Array(t.specialized?t.specialized.length:0),this.specializers=[],t.specialized)for(let e=0;e<t.specialized.length;e++)this.specialized[e]=t.specialized[e].term,this.specializers[e]=t.specialized[e].get;this.states=R(t.states,Uint32Array),this.data=R(t.stateData),this.goto=R(t.goto);let O=Object.keys(t.topRules).map((e=>t.topRules[e][1]));this.nodeSet=new l(i.map(((e,i)=>o.define({name:i>=this.minRepeatTerm?void 0:e,id:i,props:n[i],top:O.indexOf(i)>-1,error:0==i,skipped:t.skippedNodes&&t.skippedNodes.indexOf(i)>-1})))),this.maxTerm=t.maxTerm,this.tokenizers=t.tokenizers.map((t=>"number"==typeof t?new q(e,t):t)),this.topRules=t.topRules,this.nested=(t.nested||[]).map((([t,e,i,r])=>({name:t,value:e,end:new q(R(i),0),placeholder:r}))),this.dialects=t.dialects||{},this.dynamicPrecedences=t.dynamicPrecedences||null,this.tokenPrecTable=t.tokenPrec,this.termNames=t.termNames||null,this.maxNode=this.nodeSet.types.length-1;for(let t=0,e=this.states.length/6;t<e;t++)this.nextStateCache[t]=null;this.dialect=this.parseDialect(),this.top=this.topRules[Object.keys(this.topRules)[0]]}parse(t,e=0,i={}){"string"==typeof t&&(t=y(t));let r=new Y(this,t,e,i);for(;;){let t=r.advance();if(t)return t}}startParse(t,e=0,i={}){return"string"==typeof t&&(t=y(t)),new Y(this,t,e,i)}getGoto(t,e,i=!1){let r=this.goto;if(e>=r[0])return-1;for(let n=r[e+1];;){let e=r[n++],s=1&e,O=r[n++];if(s&&i)return O;for(let i=n+(e>>1);n<i;n++)if(r[n]==t)return O;if(s)return-1}}hasAction(t,e){let i=this.data;for(let r=0;r<2;r++)for(let n,s=this.stateSlot(t,r?2:1);;s+=3){if(65535==(n=i[s])){if(1!=i[s+1]){if(2==i[s+1])return C(i,s+2);break}n=i[s=C(i,s+2)]}if(n==e||0==n)return C(i,s+1)}return 0}stateSlot(t,e){return this.states[6*t+e]}stateFlag(t,e){return(this.stateSlot(t,0)&e)>0}findNested(t){let e=this.stateSlot(t,0);return 4&e?this.nested[e>>10]:null}validAction(t,e){if(e==this.stateSlot(t,4))return!0;for(let i=this.stateSlot(t,1);;i+=3){if(65535==this.data[i]){if(1!=this.data[i+1])return!1;i=C(this.data,i+2)}if(e==C(this.data,i+1))return!0}}nextStates(t){let e=this.nextStateCache[t];if(e)return e;let i=[];for(let e=this.stateSlot(t,1);;e+=3){if(65535==this.data[e]){if(1!=this.data[e+1])break;e=C(this.data,e+2)}0==(1&this.data[e+2])&&i.indexOf(this.data[e+1])<0&&i.push(this.data[e+1])}let r=this.goto,n=r[0];for(let e=0;e<n;e++)for(let n=r[e+1];;){let e=r[n++],s=r[n++];for(let O=n+(e>>1);n<O;n++)r[n]==t&&i.indexOf(s)<0&&i.push(s);if(1&e)break}return this.nextStateCache[t]=i}overrides(t,e){let i=N(this.data,this.tokenPrecTable,e);return i<0||N(this.data,this.tokenPrecTable,t)<i}configure(t){let e=Object.assign(Object.create(Z.prototype),this);if(t.props&&(e.nodeSet=this.nodeSet.extend(...t.props)),t.top){let i=this.topRules[t.top];if(!i)throw new RangeError(`Invalid top rule name ${t.top}`);e.top=i}return t.tokenizers&&(e.tokenizers=this.tokenizers.map((e=>{let i=t.tokenizers.find((t=>t.from==e));return i?i.to:e}))),t.dialect&&(e.dialect=this.parseDialect(t.dialect)),t.nested&&(e.nested=this.nested.map((e=>Object.prototype.hasOwnProperty.call(t.nested,e.name)?{name:e.name,value:t.nested[e.name],end:e.end,placeholder:e.placeholder}:e))),null!=t.strict&&(e.strict=t.strict),null!=t.bufferLength&&(e.bufferLength=t.bufferLength),e}getName(t){return this.termNames?this.termNames[t]:String(t<=this.maxNode&&this.nodeSet.types[t].name||t)}get eofTerm(){return this.maxNode+1}get hasNested(){return this.nested.length>0}dynamicPrecedence(t){let e=this.dynamicPrecedences;return null==e?0:e[t]||0}parseDialect(t){if(this.cachedDialect&&this.cachedDialect.source==t)return this.cachedDialect;let e=Object.keys(this.dialects),i=e.map((()=>!1));if(t)for(let r of t.split(" ")){let t=e.indexOf(r);t>=0&&(i[t]=!0)}let r=null;for(let t=0;t<e.length;t++)if(!i[t])for(let i,n=this.dialects[e[t]];65535!=(i=this.data[n++]);)(r||(r=new Uint8Array(this.maxTerm+1)))[i]=1;return this.cachedDialect=new F(t,i,r)}static deserialize(t){return new Z(t)}}function C(t,e){return t[e]|t[e+1]<<16}function N(t,e,i){for(let r,n=e;65535!=(r=t[n]);n++)if(r==i)return n-e;return-1}const A=[21,48,49,53,56,57,60,61,62],B=[231],D=new WeakMap;class I{constructor(){this.last=this.lastIndent=-1,this.prev=[]}get(t){if(this.last==t)return this.lastIndent;for(let e=0;e<this.prev.length;e++)if(this.prev[e]==t)return e;return-1}set(t,e){t!=this.last&&(this.last>-1&&this.setPrev(this.last,this.lastIndent),this.last=t,this.lastIndent=e)}setPrev(t,e){for(;this.prev.length<e;)this.prev.push(-1);this.prev[e]=t}static for(t){let e=D.get(t);return e||D.set(t,e=new I),e}}function M(t,e){let i=I.for(t),r=i.get(e);if(r>-1)return r;let n=t.read(Math.max(0,e-50),e),s=0,O=n.length;for(;O>0;O--){let t=n.charCodeAt(O-1);if(10==t||13==t)break}for(let t=O;t<n.length;t++){let e=n.charCodeAt(t);if(32==e)s++;else{if(9!=e)break;s+=8-s%8}}return i.setPrev(e,s),s}const H=new w(((t,e,i)=>{let r=t.get(e.start);if(r<0)return void e.accept(167,e.start);if(10!=r&&13!=r)return;if(null!=i.startOf(A))return void e.accept(165,e.start+1);let n=e.start+1,s=0;for(;n<t.length;n++){let i=t.get(n);if(32==i)s++;else{if(9!=i){if(10==i||13==s||35==i)return void e.accept(166,e.start+1);break}s+=8-s%8}}e.accept(164,e.start+1),I.for(t).set(n,s)}),{contextual:!0,fallback:!0}),J=new w(((t,e,i)=>{let r=i.startOf(B),n=null==r?0:M(t,r),s=M(t,e.start);e.accept(s<=n?169:168,e.start)}),{contextual:!0,fallback:!0}),K=new w(((t,e)=>{let i=e.start;for(let e="print",r=0;r<e.length;r++,i++)if(t.get(i)!=e.charCodeAt(r))return;let r=i;if(!/\w/.test(String.fromCharCode(t.get(i))))for(;;i++){let n=t.get(i);if(32!=n&&9!=n)return void(40!=n&&46!=n&&10!=n&&13!=n&&35!=n&&e.accept(1,r))}})),tt={__proto__:null,await:40,or:48,and:50,in:54,not:56,is:58,if:64,else:66,lambda:70,self:74,yield:90,from:92,async:100,for:102,None:154,True:156,False:156,del:170,pass:174,break:178,continue:182,return:186,raise:194,import:198,as:200,global:204,nonlocal:206,assert:210,elif:220,while:224,try:230,except:232,finally:234,with:238,def:242,class:252},et=Z.deserialize({version:13,states:"!;[O`Q!LTOOO%fQ!LUO'#GcOOQ!LQ'#Cm'#CmOOQ!LQ'#Cn'#CnO'UQ!LSO'#ClO(zQ!LUO'#GbOOQ!LQ'#Gc'#GcOOQ!LQ'#DS'#DSOOQ!LQ'#Gb'#GbO)hQ!LSO'#CqO)xQ!LSO'#DcO*YQ!LSO'#DgOOQ!LQ'#Dt'#DtO*mOWO'#DtO*uO`O'#DtO*}OpO'#DuO+YO!bO'#DuO+eO#tO'#DuO+pO&jO'#DuO-rQ!LUO'#GSOOQ!LQ'#GS'#GSO'UQ!LSO'#GRO/UQ!LUO'#GROOQ!LQ'#E^'#E^O/mQ!LSO'#E_OOQ!LQ'#GQ'#GQO/wQ!LSO'#GPOOQ&FV'#GP'#GPO0SQ!LSO'#FQOOQ!LQ'#Ft'#FtO0XQ!LSO'#FPOOQ&FV'#H]'#H]OOQ&FV'#GO'#GOOOQ!LR'#FS'#FSQ`Q!LTOOO'UQ!LSO'#CoO0gQ!LSO'#CzO0nQ!LSO'#DOO1PQ!LSO'#GgO1aQ!LUO'#ERO'UQ!LSO'#ESOOQ!LQ'#EU'#EUOOQ!LQ'#EW'#EWOOQ!LQ'#EY'#EYO1uQ!LSO'#E[O2SQ!LSO'#E`O0SQ!LSO'#EbO2gQ!LUO'#EbO0SQ!LSO'#EeO/mQ!LSO'#EhO/mQ!LSO'#ElO/mQ!LSO'#EoO2rQ!LSO'#EqO2yQ!LSO'#EvO3UQ!LSO'#ErO/mQ!LSO'#EvO0SQ!LSO'#ExO0SQ!LSO'#E}OOQ!LQ'#Cc'#CcOOQ!LQ'#Cd'#CdOOQ!LQ'#Ce'#CeOOQ!LQ'#Cf'#CfOOQ!LQ'#Cg'#CgOOQ!LQ'#Ch'#ChOOQ!LQ'#Cj'#CjO'UQ!LSO,58|O'UQ!LSO,58|O'UQ!LSO,58|O'UQ!LSO,58|O'UQ!LSO,58|O'UQ!LSO,58|O'UQ!LSO,58|O3ZQ!LSO'#DnOOQ!LQ,5:X,5:XO3nQ!LSO,5:[O3{Q#)WO,5:[O4QQ!LUO,59WO0gQ!LSO,59_O0gQ!LSO,59_O0gQ!LSO,59_O6pQ!LSO,59_O6uQ!LSO,59_O6|Q!LSO,59gO7TQ!LSO'#GbO8ZQ!LSO'#GaOOQ!LQ'#Ga'#GaOOQ!LQ'#DY'#DYO8rQ!LSO,59]O'UQ!LSO,59]O9QQ!LSO,59]O9VQ!LSO,5:QO'UQ!LSO,5:QOOQ!LQ,59},59}O9eQ!LSO,59}O9jQ!LSO,5:WO'UQ!LSO,5:WO'UQ!LSO,5:UOOQ!LQ,5:R,5:RO9{Q!LSO,5:RO:QQ!LSO,5:VOOOO'#F]'#F]O:VOWO,5:`OOQ!LQ,5:`,5:`OOOO'#F^'#F^O:_O`O,5:`O:gQ!LSO'#DvOOOO'#F_'#F_O:wOpO,5:aOOQ!LQ,5:a,5:aOOOO'#Fb'#FbO;SO!bO,5:aOOOO'#Fc'#FcO;_O#tO,5:aOOOO'#Fd'#FdO;jO&jO,5:aOOQ!LQ'#Fe'#FeO;uQ!LUO,5:eO>gQ!LUO,5<mO?QQ#4^O'#FfO?tQ!LUO,5<mOOQ!LQ,5:y,5:yO@]Q!LTO'#FmOAlQ!LSO,5;UOOQ&FV,5<k,5<kOAwQ!LUO'#HYOB`Q!LSO,5;lOOQ!LQ-E9r-E9rOOQ&FV,5;k,5;kO3PQ!LSO'#ExOOQ!LR-E9Q-E9QOBhQ!LUO,59ZODoQ!LUO,59fOEYQ!LSO'#GdOEeQ!LSO'#GdO0SQ!LSO'#GdOEpQ!LSO'#DQOExQ!LSO,59jOE}Q!LSO'#GhO'UQ!LSO'#GhO/mQ!LSO,5=ROOQ!LQ,5=R,5=RO/mQ!LSO'#D}OOQ!LQ'#EO'#EOOFlQ!LSO'#FgOF|Q!LSO,58zOG[Q!LSO,58zO)kQ!LSO,5:kOGaQ!LUO'#GjOOQ!LQ,5:n,5:nOOQ!LQ,5:v,5:vOGtQ!LSO,5:zOHVQ!LSO,5:|OOQ!LQ'#Fj'#FjOHeQ!LUO,5:|OHsQ!LSO,5:|OHxQ!LSO'#H[OOQ!LQ,5;P,5;POIWQ!LSO'#HXOOQ!LQ,5;S,5;SO3UQ!LSO,5;WO3UQ!LSO,5;ZOIiQ!LUO'#H^O'UQ!LSO'#H^OIsQ!LSO,5;]O2rQ!LSO,5;]O/mQ!LSO,5;bO0SQ!LSO,5;dOIxQ!LTO'#EmOKRQ&FXO,5;^ONjQ!LSO'#H_O3UQ!LSO,5;bONuQ!LSO,5;dONzQ!LSO,5;iO!#oQ!LUO1G.hO!#vQ!LUO1G.hO!&gQ!LUO1G.hO!&qQ!LUO1G.hO!)[Q!LUO1G.hO!)oQ!LUO1G.hO!*SQ!LUO1G.hO!,rQ!LSO'#GpO!-QQ!LUO'#GSO/mQ!LSO'#GpO!-[Q!LSO'#GoOOQ!LQ,5:Y,5:YO!-dQ!LSO,5:YO!-iQ!LSO'#GqO!-tQ!LSO'#GqO!.XQ!LSO1G/vOOQ!LQ'#Dr'#DrOOQ!LQ1G/v1G/vOOQ!LQ1G.y1G.yO!/XQ!LUO1G.yO!/`Q!LUO1G.yO0gQ!LSO1G.yO!/{Q!LSO1G/ROOQ!LQ'#DX'#DXO/mQ!LSO,59rOOQ!LQ1G.w1G.wO!0SQ!LSO1G/dO!0dQ!LSO1G/dO!0lQ!LSO1G/eO'UQ!LSO'#GiO!0qQ!LSO'#GiO!0vQ!LUO1G.wO!1WQ!LSO,59fO!2^Q!LSO'#FXO!2qQ!LSO,5=XO!2yQ!LSO1G/lO!3OQ!LUO1G/lOOQ!LQ1G/i1G/iO!3`Q!LSO'#FUO!4YQ!LSO,5=SO/mQ!LSO1G/pO!4wQ!LSO1G/rO!4|Q!LUO1G/rO!5^Q!LUO1G/pOOQ!LQ1G/m1G/mOOQ!LQ1G/q1G/qOOOO-E9Z-E9ZOOQ!LQ1G/z1G/zOOOO-E9[-E9[O!5nQ!LSO'#G|O/mQ!LSO'#G|O!5|Q!LSO,5:bOOOO-E9]-E9]OOQ!LQ1G/{1G/{OOOO-E9`-E9`OOOO-E9a-E9aOOOO-E9b-E9bOOQ!LQ-E9c-E9cO!6XQ!LUO1G2XO'UQ!LSO,5<QOOQ!LQ,5<Q,5<QOOQ!LQ-E9d-E9dOOQ!LQ,5<X,5<XOOQ!LQ-E9k-E9kOOQ&FV1G0p1G0pO0SQ!LSO'#FiO!6pQ!LUO,5=tOOQ!LQ1G1W1G1WO!7XQ!LSO1G1WOOQ!LQ'#DT'#DTO/mQ!LSO,5=OOOQ!LQ,5=O,5=OO!7^Q!LSO'#FTO!7lQ!LSO,59lO!7tQ!LSO1G/UO!8OQ!LUO,5=SOOQ!LQ1G2m1G2mOOQ!LQ,5:i,5:iO!8oQ!LSO'#GROOQ!LQ,5<R,5<ROOQ!LQ-E9e-E9eO!9QQ!LSO1G.fOOQ!LQ1G0V1G0VO!9`Q!LSO'#FWO!9sQ!LSO,5=UO/mQ!LSO1G0fO/mQ!LSO1G0fO0SQ!LSO1G0hOOQ!LQ-E9h-E9hO!:UQ!LSO1G0hO!:aQ!LSO1G0hO!:fQ!LSO'#FlO!:wQ!LSO,5=vO!;VQ!LSO'#FhO!;pQ!LSO,5=sO!<RQ&FXO1G0rO!?gQ&FXO1G0uO!BxQ!LSO'#FpO!CVQ!LSO,5=xO!C_Q!LUO,5=xO/mQ!LSO1G0wO!CiQ!LSO1G0wO3UQ!LSO1G0|ONuQ!LSO1G1OOOQ&FV,5;X,5;XO!CnQ!LTO,5;XO!EaQ&FXO1G0xO!HxQ!LSO'#FqO3UQ!LSO1G0xO3UQ!LSO1G0xO!IVQ!LSO'#FrO!IgQ!LSO,5=yO0SQ!LSO,5=yOOQ&FV1G0|1G0|O!JQQ!LSO'#EzO!JXQ#)WO1G1OOOQ&FV1G1T1G1TO3UQ!LSO1G1TOOQ!LQ,5=[,5=[OOQ!LQ'#Do'#DoO/mQ!LSO,5=[O!JaQ!LSO'#FZO!JwQ!LSO,5=ZOOQ!LQ1G/t1G/tO!KPQ!LSO'#F[O!KdQ!LSO,5=]O!KlQ!LSO,5=]O!LPQ!LSO,5=]O!LaQ!LSO,5=]OOQ!LQ7+%b7+%bOOQ!LQ7+$e7+$eO!7tQ!LSO7+$mO!NSQ!LSO1G.yO!NZQ!LSO1G.yOOQ!LQ1G/^1G/^OOQ!LQ,5;q,5;qO'UQ!LSO,5;qOOQ!LQ7+%O7+%OO!NbQ!LSO7+%OOOQ!LQ-E9T-E9TOOQ!LQ7+%P7+%PO!NrQ!LSO,5=TO'UQ!LSO,5=TOOQ!LQ7+$c7+$cO!NwQ!LSO7+%OO# PQ!LSO7+%POOQ!LQ,5;s,5;sO'UQ!LSO,5;sOOQ!LQ-E9V-E9VOOQ!LQ7+%W7+%WO# UQ!LSO1G2sO# ^Q!LSO7+%WOOQ!LQ,5;p,5;pO'UQ!LSO,5;pOOQ!LQ-E9S-E9SO# cQ!LSO7+%[OOQ!LQ7+%^7+%^O# qQ!LSO1G2nO#!`Q!LSO7+%^O#!eQ!LSO'#FYO#!xQ!LSO1G2tO##QQ!LSO7+%[O##VQ!LSO'#F`O##pQ!LSO,5=hO##pQ!LSO,5=hO#$OOMhO'#DxO#$ZOQO'#G}OOOO1G/|1G/|O#$`Q!LSO1G/|O#$hQ!LUO1G1lOOQ!LQ,5<T,5<TOOQ!LQ-E9g-E9gOOQ!LQ7+&r7+&rOOQ!LQ1G2j1G2jOOQ!LQ,5;o,5;oOOQ!LQ-E9R-E9ROOQ!LQ7+$p7+$pO#%RQ!LSO'#FfO#%oQ!LSO,5<mO#&QQ!LUO,5;rOOQ!LQ-E9U-E9UOOQ!LQ7+&Q7+&QO#&eQ!LSO7+&QOOQ!LQ7+&S7+&SO#&sQ!LSO'#HZO0SQ!LSO7+&SO#'XQ!LSO7+&SOOQ!LQ,5<W,5<WOOQ!LQ-E9j-E9jOOQ!LQ,5<S,5<SOOQ!LQ-E9f-E9fO#'dQ&FXO7+&^O!HxQ!LSO'#FoO3UQ!LSO7+&^O3UQ!LSO7+&aO#*xQ!LUO,5<[O'UQ!LSO,5<[OOQ!LQ-E9n-E9nO#+SQ!LSO1G3dO3UQ!LSO7+&cO/mQ!LSO7+&cOOQ&FV7+&h7+&hO!JXQ#)WO7+&jO#+[Q&FWO1G0sOOQ&FV-E9o-E9oO3UQ!LSO7+&dO3UQ!LSO7+&dOOQ&FV,5<],5<]O#+gQ!LSO,5<]OOQ&FV7+&d7+&dO#+rQ&FXO7+&dO#/TQ!LSO,5<^OOQ!LQ-E9p-E9pO#/`Q!LSO1G3eO#/hQ!LSO'#HaO#/vQ!LSO'#HaO0SQ!LSO'#HaOOQ!LQ'#Ha'#HaO#0RQ!LSO'#H`OOQ!LQ,5;f,5;fO#0ZQ!LSO,5;fO/mQ!LSO'#E|OOQ&FV7+&j7+&jO3UQ!LSO7+&jOOQ&FV7+&o7+&oOOQ!LQ1G2v1G2vOOQ!LQ,5;u,5;uOOQ!LQ-E9X-E9XO#0`Q!LSO,5;vO#0kQ!LSO,5;vOOQ!LQ-E9Y-E9YO#1OQ!LSO1G2wO#1WQ!LSO1G2wO#1hQ!LSO1G2wO#1OQ!LSO1G2wOOQ!LQ<<HX<<HXO#1sQ!LUO1G1]OOQ!LQ<<Hj<<HjP#1}Q!LSO'#FVO6|Q!LSO1G2oO#2[Q!LSO1G2oO#2aQ!LSO<<HjOOQ!LQ<<Hk<<HkO#2qQ!LUO1G1_OOQ!LQ<<Hr<<HrO#2{Q!LUO1G1[O#3lQ!LSO7+(`O#3tQ!LSO<<HvOOQ!LQ<<Hx<<HxO#3yQ!LSO,5;tO'UQ!LSO,5;tOOQ!LQ-E9W-E9WOOQ!LQ<<Hv<<HvOOQ!LQ,5;z,5;zO/mQ!LSO,5;zOOQ!LQ-E9^-E9^O#4OQ!LSO1G3SOOOO'#Fa'#FaO#4^OMhO,5:dOOOO,5=i,5=iOOOO7+%h7+%hO#4iQ!LSO1G2XO/mQ!LSO<<IlO#4zQ!LSO'#FkO#5`Q!LSO,5=uO0SQ!LSO,5=uO#5qQ!LSO<<InOOQ!LQ<<In<<InO0SQ!LSO<<InOOQ&FV-E9m-E9mO3UQ!LSO<<IxOOQ&FV,5<Z,5<ZO3UQ!LSO,5<ZOOQ&FV<<Ix<<IxOOQ&FV<<I{<<I{O#5vQ!LUO1G1vO#6QQ&FXO<<I}O3UQ!LSO<<I}OOQ&FV<<JU<<JUO3UQ!LSO<<JUO!CnQ!LTO'#FnO#9cQ&FWO7+&_OOQ&FV7+&_7+&_OOQ&FV<<JO<<JOO#9nQ&FXO<<JOOOQ&FV1G1w1G1wO0SQ!LSO1G1wO3UQ!LSO<<JOO0SQ!LSO1G1xO#=PQ!LSO7+)POOQ!LQ'#E{'#E{O/mQ!LSO,5={O#=XQ!LSO,5={OOQ!LQ,5={,5={O#=dQ!LSO'#FsO#=nQ!LSO,5=zOOQ!LQ1G1Q1G1QOOQ!LQ,5;h,5;hO#=vQ!LSO1G1bO#>ZQ!LSO1G1bO#>kQ!LSO1G1bO#>vQ!LSO7+(cO#>vQ!LSO7+(cO#?OQ!LSO7+(cO#?`Q!LSO7+(ZO6|Q!LSO7+(ZOOQ!LQAN>UAN>UOOQ!LQAN>bAN>bO/mQ!LSO1G1`O#?yQ!LUO1G1`OOQ!LQ1G1f1G1fOOOO-E9_-E9_OOQ!LQAN?WAN?WO#@TQ!LSO,5<VOOQ!LQ-E9i-E9iO#@iQ!LSO1G3aOOQ!LQAN?YAN?YO#@zQ!LSOAN?YOOQ&FVAN?dAN?dOOQ&FV1G1u1G1uO3UQ!LSOAN?iO#APQ&FXOAN?iOOQ&FVAN?pAN?pOOQ&FU,5<Y,5<YOOQ&FU-E9l-E9lOOQ&FV<<Iy<<IyO3UQ!LSOAN?jO3UQ!LSO7+'cOOQ&FVAN?jAN?jOOQ!LQ7+'d7+'dOOQ!LQ1G3g1G3gO/mQ!LSO1G3gOOQ!LQ,5<_,5<_OOQ!LQ-E9q-E9qO#DbQ!LSO7+&|O#DrQ!LSO7+&|OOQ!LQ7+&|7+&|O#D}Q!LSO<<K}O#D}Q!LSO<<K}O#EVQ!LSO'#GkOOQ!LQ<<Ku<<KuO#EaQ!LSO<<KuOOQ!LQ7+&z7+&zO0SQ!LSO1G1qO#EzQ!LSO7+({OOQ!LQG24tG24tOOQ&FVG25TG25TO3UQ!LSOG25TOOQ&FVG25UG25UOOQ&FV<<J}<<J}OOQ!LQ7+)R7+)ROOQ!LQ<<Jh<<JhO#F]Q!LSO<<JhO#FmQ!LSOANAiO#FuQ!LSO'#GlOOQ!LQ'#Gl'#GlO0nQ!LSO'#DbO#G`Q!LSO,5=VOOQ!LQANAaANAaOOQ!LQ7+']7+']OOQ&FVLD*oLD*oOOQ!LQAN@SAN@SO#GwQ!LSO,59|OOQ!LQ1G2q1G2qO#EVQ!LSO1G/hOOQ!LQ7+%S7+%SO6|Q!LSO'#CzO6|Q!LSO,59_O6|Q!LSO,59_O6|Q!LSO,59_O#G|Q!LUO,5<mO6|Q!LSO1G.yO/mQ!LSO1G/UO/mQ!LSO7+$mO'UQ!LSO'#GRO#HaQ!LSO,59_O#HfQ!LSO,59_O#HmQ!LSO,59jO#HrQ!LSO1G/RO0nQ!LSO'#DOO6|Q!LSO,59g",stateData:"#IT~O$qOS$lOS$kOSQOS~OPhOTeOdsOfXOltOp!SOsuOudO}vO!O!PO!S!VO!T!UO!WYO![ZO!gdO!ndO!odO!pdO!wxO!yyO!{zO!}{O#P|O#T}O#V!OO#Y!QO#Z!QO#]!RO#d!TO#g!WO#k!XO#m!YO#r!ZO#ulO$jqO$|QO$}QO%RRO%SVO%g[O%h]O%k^O%n_O%t`O%waO%ybO~OT!aO]!aO_!bOf!jO!W!lO!e!mO$w![O$x!]O$y!^O$z!_O${!_O$|!`O$}!`O%O!aO%P!aO%Q!aO~Oh%VXi%VXj%VXk%VXl%VXm%VXp%VXx%VXy%VX!t%VX#_%VX$j%VX$m%VX%X%VX!P%VX!S%VX!T%VX%Y%VX!X%VX!]%VX!O%VX#W%VXq%VX!k%VX~P$bOdsOfXOudO!WYO![ZO!gdO!ndO!odO!pdO$|QO$}QO%RRO%SVO%g[O%h]O%k^O%n_O%t`O%waO%ybO~Ox%UXy%UX#_%UX$j%UX$m%UX%X%UX~Oh!pOi!qOj!oOk!oOl!rOm!sOp!tO!t%UX~P(fOT!zOl,qOs-OO}vO~P'UOT!}Ol,qOs-OO!X#OO~P'UOT#RO_#SOl,qOs-OO!]#TO~P'UO%i#WO%j#YO~O%l#ZO%m#YO~O![#]O%o#^O%s#`O~O![#]O%u#aO%v#`O~O![#]O%j#`O%x#cO~O![#]O%m#`O%z#eO~OT$vX]$vX_$vXf$vXh$vXi$vXj$vXk$vXl$vXm$vXp$vXx$vX!W$vX!e$vX$w$vX$x$vX$y$vX$z$vX${$vX$|$vX$}$vX%O$vX%P$vX%Q$vX!P$vX!S$vX!T$vX~O%g[O%h]O%k^O%n_O%t`O%waO%ybOy$vX!t$vX#_$vX$j$vX$m$vX%X$vX%Y$vX!X$vX!]$vX!O$vX#W$vXq$vX!k$vX~P+{Ox#jOy$uX!t$uX#_$uX$j$uX$m$uX%X$uX~Ol,qOs-OO~P'UO#_#mO$j#oO$m#oO~O%SVO~O!S#tO#m!YO#r!ZO#ulO~OltO~P'UOT#yO_#zOu#xO%SVOytP~OT$OOl,qOs-OO!O$PO~P'UOy$RO!t$WO%X$SO#_!uX$j!uX$m!uX~OT$OOl,qOs-OO~P'UOl,qOs-OO#_#SX$j#SX$m#SX~P'UO!e$^O!n$^O%SVO~OT$hO~P'UO!T$jO#k$kO#m$lO~Oy$mO~OT$|O_$|Ol,qOs-OO!P%OO~P'UOl,qOs-OOy%RO~P'UO%f%TO~O_!bOf!jO!W!lO!e!mOT`a]`ah`ai`aj`ak`al`am`ap`ax`ay`a!t`a#_`a$j`a$m`a$w`a$x`a$y`a$z`a${`a$|`a$}`a%O`a%P`a%Q`a%X`a!P`a!S`a!T`a%Y`a!X`a!]`a!O`a#W`aq`a!k`a~Ok%YO~Ol%YO~P'UOl,qO~P'UOh,sOi,tOj,rOk,rOl,zOm,{Op-PO!P%UX!S%UX!T%UX%Y%UX!X%UX!]%UX!O%UX#W%UX!k%UX~P(fO%Y%[Ox%TX!P%TX!S%TX!T%TX!X%TXy%TX~Ox%_O!P%^O!S%cO!T%bO~O!P%^O~Ox%fO!S%cO!T%bO!X%aX~O!X%jO~Ox%kOy%mO!S%cO!T%bO!]%[X~O!]%qO~O!]%rO~O%i#WO%j%tO~O%l#ZO%m%tO~OT%wOl,qOs-OO}vO~P'UO![#]O%o#^O%s%zO~O![#]O%u#aO%v%zO~O![#]O%j%zO%x#cO~O![#]O%m%zO%z#eO~OT!ma]!ma_!maf!mah!mai!maj!mak!mal!mam!map!max!may!ma!W!ma!e!ma!t!ma#_!ma$j!ma$m!ma$w!ma$x!ma$y!ma$z!ma${!ma$|!ma$}!ma%O!ma%P!ma%Q!ma%X!ma!P!ma!S!ma!T!ma%Y!ma!X!ma!]!ma!O!ma#W!maq!ma!k!ma~P#yOx#jOy$ua!t$ua#_$ua$j$ua$m$ua%X$ua~P$bOT&QOltOsuOx$YXy$YX!t$YX#_$YX$j$YX$m$YX%X$YX~P'UOx#jOy$ua!t$ua#_$ua$j$ua$m$ua%X$ua~OPhOTeOltOsuO}vO!O!PO!wxO!yyO!{zO!}{O#P|O#T}O#V!OO#Y!QO#Z!QO#]!RO#_$aX$j$aX$m$aX~P'UO#_#mO$j&VO$m&VO~O!e&WOf%|X$j%|X#W%|X#_%|X$m%|X#V%|X~Of!jO$j&YO~Ohcaicajcakcalcamcapcaxcayca!tca#_ca$jca$mca%Xca!Pca!Sca!Tca%Yca!Xca!]ca!Oca#Wcaqca!kca~P$bOpnaxnayna#_na$jna$mna%Xna~Oh!pOi!qOj!oOk!oOl!rOm!sO!tna~PDWO%X&[Ox%WXy%WX~O%SVOx%WXy%WX~Ox&_OytX~Oy&aO~Ox%kO#_%[X$j%[X$m%[X!P%[Xy%[X!]%[X!k%[X%X%[X~OT,yOl,qOs-OO}vO~P'UO%X$SO#_Sa$jSa$mSa~O%X$SO~Ox&jO#_%^X$j%^X$m%^Xk%^X~P$bOx&mO!O&lO#_#Sa$j#Sa$m#Sa~O#W&nO#_#Ua$j#Ua$m#Ua~O!e$^O!n$^O#V&pO%SVO~O#V&pO~Ox&rO#_&OX$j&OX$m&OX~Ox&tO#_%{X$j%{X$m%{Xy%{X~Ox&xOk&QX~P$bOk&{O~OPhOTeOltOsuO}vO!O!PO!wxO!yyO!{zO!}{O#P|O#T}O#V!OO#Y!QO#Z!QO#]!RO$j'QO~P'UOq'UO#h'SO#i'TOP#faT#fad#faf#fal#fap#fas#fau#fa}#fa!O#fa!S#fa!T#fa!W#fa![#fa!g#fa!n#fa!o#fa!p#fa!w#fa!y#fa!{#fa!}#fa#P#fa#T#fa#V#fa#Y#fa#Z#fa#]#fa#d#fa#g#fa#k#fa#m#fa#r#fa#u#fa$i#fa$j#fa$|#fa$}#fa%R#fa%S#fa%g#fa%h#fa%k#fa%n#fa%t#fa%w#fa%y#fa$m#fa$n#fa$o#fa~Ox'VO#W'XOy&RX~Of'ZO~Of!jOy$mO~OT!aO]!aO_!bOf!jO!W!lO!e!mO$y!^O$z!_O${!_O$|!`O$}!`O%O!aO%P!aO%Q!aOhUiiUijUikUilUimUipUixUiyUi!tUi#_Ui$jUi$mUi$wUi%XUi!PUi!SUi!TUi%YUi!XUi!]Ui!OUi#WUiqUi!kUi~O$x!]O~P! SO$xUi~P! SOT!aO]!aO_!bOf!jO!W!lO!e!mO$|!`O$}!`O%O!aO%P!aO%Q!aOhUiiUijUikUilUimUipUixUiyUi!tUi#_Ui$jUi$mUi$wUi$xUi$yUi%XUi!PUi!SUi!TUi%YUi!XUi!]Ui!OUi#WUiqUi!kUi~O$z!_O${!_O~P!#}O$zUi${Ui~P!#}O_!bOf!jO!W!lO!e!mOhUiiUijUikUilUimUipUixUiyUi!tUi#_Ui$jUi$mUi$wUi$xUi$yUi$zUi${Ui$|Ui$}Ui%XUi!PUi!SUi!TUi%YUi!XUi!]Ui!OUi#WUiqUi!kUi~OT!aO]!aO%O!aO%P!aO%Q!aO~P!&{OTUi]Ui%OUi%PUi%QUi~P!&{Of!jO!W!lO!e!mOTUi]Ui_UihUiiUijUikUilUimUipUixUiyUi!tUi#_Ui$jUi$mUi$wUi$xUi$yUi$zUi${Ui$|Ui$}Ui%OUi%PUi%QUi%XUi!PUi!SUi!TUi%YUi!XUi!]Ui!OUi#WUiqUi!kUi~O!S%cO!T%bOx%dX!P%dX~O%X'`O%Y'`O~P+{Ox'bO!P%cX~O!P'dO~Ox'eOy'gO!X%eX~Ol,qOs-OOx'eOy'hO!X%eX~P'UO!X'jO~Oj!oOk!oOl!rOm!sOhgipgixgiygi!tgi#_gi$jgi$mgi%Xgi~Oi!qO~P!.^Oigi~P!.^Oh,sOi,tOj,rOk,rOl,zOm,{O~Oq'lO~P!/gOT'qOl,qOs-OO!P'rO~P'UOx'sO!P'rO~O!P'uO~O!T'wO~Ox'sO!P'xO!S%cO!T%bO~P$bOh,sOi,tOj,rOk,rOl,zOm,{O!Pna!Sna!Tna%Yna!Xna!]na!Ona#Wnaqna!kna~PDWOT'|Ol,qOs-OOx#{X!X#{X~P'UOx%fO!X%aa~O!X(OO~Ox%fO!S%cO!T%bO!X%aa~P$bOT(SOl,qOs-OOx#xX!]#xX#_#xX$j#xX$m#xX!P#xXy#xX!k#xX%X#xX~P'UOx%kO!]%[a#_%[a$j%[a$m%[a!P%[ay%[a!k%[a%X%[a~O!](VO~Ox%kO!S%cO!T%bO!]%[a~P$bOx(YO!S%cO!T%bO!]%ba~P$bOx(]Oy%pX!]%pX!k%pX~Oy(`O!](bO!k(cO~Ox#jOy$ui!t$ui#_$ui$j$ui$m$ui%X$ui~O!e&WOf%|a$j%|a#W%|a#_%|a$m%|a#V%|a~O$j(gO~OT#yO_#zOu#xO%SVO~Ox&_Oyta~OltOsuO~P'UOx%kO#_%[a$j%[a$m%[a!P%[ay%[a!]%[a!k%[a%X%[a~P$bOx(lO#_$uX$j$uX$m$uX%X$uX~O%X$SO#_Si$jSi$mSi~Ox#zX#_#zX$j#zX$m#zXk#zX~P'UOx&jO#_%^a$j%^a$m%^ak%^a~OT(rOf(tO%SVO~O#V(uO~O%SVOx$`X#_$`X$j$`X$m$`X~Ox&rO#_&Oa$j&Oa$m&Oa~Ol,qOs-OOx$[X#_$[X$j$[X$m$[Xy$[X~P'UOx&tO#_%{a$j%{a$m%{ay%{a~Oq(|O#b({OP#`iT#`id#`if#`il#`ip#`is#`iu#`i}#`i!O#`i!S#`i!T#`i!W#`i![#`i!g#`i!n#`i!o#`i!p#`i!w#`i!y#`i!{#`i!}#`i#P#`i#T#`i#V#`i#Y#`i#Z#`i#]#`i#d#`i#g#`i#k#`i#m#`i#r#`i#u#`i$i#`i$j#`i$|#`i$}#`i%R#`i%S#`i%g#`i%h#`i%k#`i%n#`i%t#`i%w#`i%y#`i$m#`i$n#`i$o#`i~Oq(}OP#ciT#cid#cif#cil#cip#cis#ciu#ci}#ci!O#ci!S#ci!T#ci!W#ci![#ci!g#ci!n#ci!o#ci!p#ci!w#ci!y#ci!{#ci!}#ci#P#ci#T#ci#V#ci#Y#ci#Z#ci#]#ci#d#ci#g#ci#k#ci#m#ci#r#ci#u#ci$i#ci$j#ci$|#ci$}#ci%R#ci%S#ci%g#ci%h#ci%k#ci%n#ci%t#ci%w#ci%y#ci$m#ci$n#ci$o#ci~OT)POk$dXx$dX~P'UOx&xOk&Qa~Ox&xOk&Qa~P$bOk)TO~OPhOTeOltOp!SOsuO}vO!O!PO!S!VO!T!UO!wxO!yyO!{zO!}{O#P|O#T}O#V!OO#Y!QO#Z!QO#]!RO#d!TO#g!WO#k!XO#m!YO#r!ZO#ulO~P'UOq)ZO#h'SO#i)YOP#fiT#fid#fif#fil#fip#fis#fiu#fi}#fi!O#fi!S#fi!T#fi!W#fi![#fi!g#fi!n#fi!o#fi!p#fi!w#fi!y#fi!{#fi!}#fi#P#fi#T#fi#V#fi#Y#fi#Z#fi#]#fi#d#fi#g#fi#k#fi#m#fi#r#fi#u#fi$i#fi$j#fi$|#fi$}#fi%R#fi%S#fi%g#fi%h#fi%k#fi%n#fi%t#fi%w#fi%y#fi$m#fi$n#fi$o#fi~Ol,qOs-OOy$mO~P'UOl,qOs-OOx$fXy$fX~P'UOx'VOy&Ra~OT)dO_)eOu)cO%O)fO%SVO~O!P)hO~P!IoOy$mO&U)jO~OT$|O_$|Ol,qOs-OOx#}X!P#}X~P'UOx'bO!P%ca~Ol,qOs-OOy)rOx$OX!X$OX~P'UOx'eO!X%ea~Ol,qOs-OOx'eOy)uO!X%ea~P'UOl,qOs-OOx'eO!X%ea~P'UOx'eOy)uO!X%ea~Oj,rOk,rOl,zOm,{Ohgipgixgi!Pgi!Sgi!Tgi%Ygi!Xgiygi!]gi#_gi$jgi$mgi!Ogi#Wgiqgi!kgi%Xgi~Oi,tO~P!LlOigi~P!LlOT'qOl,qOs-OO!P)zO~P'UOk)|O~Ox*OO!P)zO~O!P*PO~Ox%fO!X%ai~O!X*RO~Ox(YO!S%cO!T%bO!]%bi~Ox%kO!]%[i#_%[i$j%[i$m%[i!P%[iy%[i!k%[i%X%[i~O!]*VO~O_*XOl,qOs-OOx#|X!]#|X~P'UOx(YO!]%bi~O!]*ZO~OT*]Ol,qOs-OOx$SXy$SX!]$SX!k$SX~P'UOx(]Oy%pa!]%pa!k%pa~O![#]O%r*`O!]!lX~O!]*bO~Oy(`O!]*cO~Ox$Yiy$Yi!t$Yi#_$Yi$j$Yi$m$Yi%X$Yi~P$bOT&QOl,qOs-OOx$YX#_$YX$j$YX$m$YX%X$YX~P'UOx(lO#_$ua$j$ua$m$ua%X$ua~Ox#za#_#za$j#za$m#zak#za~P$bOx*eO#_#Sq$j#Sq$m#Sq~Ox*fO#W*hO#_%}X$j%}X$m%}X!P%}X~OT*jOf*kO%SVO~Oq*mO#b({OP#`qT#`qd#`qf#`ql#`qp#`qs#`qu#`q}#`q!O#`q!S#`q!T#`q!W#`q![#`q!g#`q!n#`q!o#`q!p#`q!w#`q!y#`q!{#`q!}#`q#P#`q#T#`q#V#`q#Y#`q#Z#`q#]#`q#d#`q#g#`q#k#`q#m#`q#r#`q#u#`q$i#`q$j#`q$|#`q$}#`q%R#`q%S#`q%g#`q%h#`q%k#`q%n#`q%t#`q%w#`q%y#`q$m#`q$n#`q$o#`q~Ok$dax$da~P$bOx&xOk&Qi~O$m*yO$n*wO$o*yO~Ox*}Oy$mO#W*}O~O#i+OOP#fqT#fqd#fqf#fql#fqp#fqs#fqu#fq}#fq!O#fq!S#fq!T#fq!W#fq![#fq!g#fq!n#fq!o#fq!p#fq!w#fq!y#fq!{#fq!}#fq#P#fq#T#fq#V#fq#Y#fq#Z#fq#]#fq#d#fq#g#fq#k#fq#m#fq#r#fq#u#fq$i#fq$j#fq$|#fq$}#fq%R#fq%S#fq%g#fq%h#fq%k#fq%n#fq%t#fq%w#fq%y#fq$m#fq$n#fq$o#fq~O#W+POx$fay$fa~Ox'VOy&Ri~Oy$RO%X+ROx&TX!P&TX~O%SVOx&TX!P&TX~Ox+VO!P&SX~O!P+XO~Oy+ZOx$Oa!X$Oa~Ol,qOs-OOy+[Ox$Oa!X$Oa~P'UOx'eO!X%ei~Ol,qOs-OOx'eO!X%ei~P'UOx'eOy+`O!X%ei~Ox#yi!P#yi~P$bOT'qOl,qOs-OO~P'UOk+bO~OT'qOl,qOs-OO!P+cO~P'UOx#{i!X#{i~P$bOx#xi!]#xi#_#xi$j#xi$m#xi!P#xiy#xi!k#xi%X#xi~P$bOx(YO!]%bq~O!]+dO~Oy+eO~Ox(]Oy%pi!]%pi!k%pi~O![#]O%r*`O!]!la~Ox(lO#_$ui$j$ui$m$ui%X$ui~O%SVOx$_X#_$_X$j$_X$m$_X!P$_X~Ox*fO#_%}a$j%}a$m%}a!P%}a~O!P+mO~Ok$dix$di~P$bOq+qOP#eyT#eyd#eyf#eyl#eyp#eys#eyu#ey}#ey!O#ey!S#ey!T#ey!W#ey![#ey!g#ey!n#ey!o#ey!p#ey!w#ey!y#ey!{#ey!}#ey#P#ey#T#ey#V#ey#Y#ey#Z#ey#]#ey#d#ey#g#ey#k#ey#m#ey#r#ey#u#ey$i#ey$j#ey$|#ey$}#ey%R#ey%S#ey%g#ey%h#ey%k#ey%n#ey%t#ey%w#ey%y#ey$m#ey$n#ey$o#ey~O$m+vO$n*wO$o+vO~O#i+wOP#fyT#fyd#fyf#fyl#fyp#fys#fyu#fy}#fy!O#fy!S#fy!T#fy!W#fy![#fy!g#fy!n#fy!o#fy!p#fy!w#fy!y#fy!{#fy!}#fy#P#fy#T#fy#V#fy#Y#fy#Z#fy#]#fy#d#fy#g#fy#k#fy#m#fy#r#fy#u#fy$i#fy$j#fy$|#fy$}#fy%R#fy%S#fy%g#fy%h#fy%k#fy%n#fy%t#fy%w#fy%y#fy$m#fy$n#fy$o#fy~Ox'VOy&Rq~O%X+ROx&Ta!P&Ta~Ox$gX!P$gX~P!IoOx+VO!P&Sa~Ol,qOs-OOy,POx$Oi!X$Oi~P'UOl,qOs-OOx$Oi!X$Oi~P'UOy,POx$Oi!X$Oi~Ox'eO!X%eq~Ol,qOs-OOx'eO!X%eq~P'UOp,UO!S%cO!T%bO!P%]q!X%]q!]%]qx%]q~P!/gOx#|i!]#|i~P$bO#W,YOx$_a#_$_a$j$_a$m$_a!P$_a~Ox*fO#_%}i$j%}i$m%}i!P%}i~O!P,[O~Oq,^OP#e!RT#e!Rd#e!Rf#e!Rl#e!Rp#e!Rs#e!Ru#e!R}#e!R!O#e!R!S#e!R!T#e!R!W#e!R![#e!R!g#e!R!n#e!R!o#e!R!p#e!R!w#e!R!y#e!R!{#e!R!}#e!R#P#e!R#T#e!R#V#e!R#Y#e!R#Z#e!R#]#e!R#d#e!R#g#e!R#k#e!R#m#e!R#r#e!R#u#e!R$i#e!R$j#e!R$|#e!R$}#e!R%R#e!R%S#e!R%g#e!R%h#e!R%k#e!R%n#e!R%t#e!R%w#e!R%y#e!R$m#e!R$n#e!R$o#e!R~Ol,qOs-OOx$Oq!X$Oq~P'UOy,cOx$Oq!X$Oq~Ox'eO!X%ey~Ol,qOs,gO~P'UOp,UO!S%cO!T%bO!P%]y!X%]y!]%]yx%]y~P!/gOx*fO#_%}q$j%}q$m%}q!P%}q~Ol,qOs-OOx$Oy!X$Oy~P'UOx'eO!X%e!R~Op%`X!P%`X!S%`X!T%`X!X%`X!]%`Xx%`X~P!/gOp,UO!S%cO!T%bO!P%_a!X%_a!]%_ax%_a~Oy,oO~Ox(lO#_$ua$j$ua$m$ua%X$ua~P$bOk,vO~Ol,vO~P'UOy,wO~Oq,xO~P!/gO%h%k%w%y%g%n%t%S%g~",goto:"!&h&UPPPP&VP&_(|)d){*e+O+jP,VP&_,t,t&_P&_P/cPPPPPP/c1bPP1bP2}P3W7`PP7c7o7rPPP&_&_PP8O&_PP&_&_PP&_&_&_&_8S8x&_P8{P9O9O;qP<V&_PPP<Z<a&VP&V&VP&VP&VP&VP&VP&V&V&VP&VPP&VPP&VP<gP<n<tP<nP<n<nPPP<nP>mP>v>|?S>mP<n?YP?a?g?m?y@T@Z@e@o@uAcAiAoAuBPBVB]BcBiBoCRC]CcCiCoCyDPDVD]DcDmDsD}ETPPPPPPPPPE^EhEqE{FWPPPPPPPPPPPPI}JgNU!!qPP!!y!#X!#b!$W!#}!$a!$g!$j!$m!$p!$vPPPPPPPPPP!$y!$|PPPPPPPPP!%S!%`!%l!%x!%{!&R!&X!&_!&b]iOr#m$m'Q*w&XdOSXYZehrstvx|}!R!S!T!U!X!c!d!e!f!g!h!i!j!l!o!p!q!s!t!z!}#R#S#]#j#m$O$P$R$T$W$h$j$k$m$|%R%Y%]%_%b%f%k%m%w&Q&]&a&j&l&m&t&x&{'Q'S'V'a'b'e'g'h'l'q's'w'|(S(Y(](l({)P)T)j)r)u){)|*O*X*]*e*w+S+Z+[+`+b+e+|,P,U,c,o,q,r,s,t,v,w,x,y,{-Py!cP#i#v$X$g%d%i%o%p&b&z(d(n)O)y*Q*S*r+f,u{!dP#i#v$X$g$s%d%i%o%p&b&z(d(n)O)y*Q*S*r+f,u}!eP#i#v$X$g$s$t%d%i%o%p&b&z(d(n)O)y*Q*S*r+f,u!P!fP#i#v$X$g$s$t$u%d%i%o%p&b&z(d(n)O)y*Q*S*r+f,u!R!gP#i#v$X$g$s$t$u$v%d%i%o%p&b&z(d(n)O)y*Q*S*r+f,u!T!hP#i#v$X$g$s$t$u$v$w%d%i%o%p&b&z(d(n)O)y*Q*S*r+f,u!X!iP!n#i#v$X$g$s$t$u$v$w$x%d%i%o%p&b&z(d(n)O)y*Q*S*r+f,u&XSOSXYZehrstvx|}!R!S!T!U!X!c!d!e!f!g!h!i!j!l!o!p!q!s!t!z!}#R#S#]#j#m$O$P$R$T$W$h$j$k$m$|%R%Y%]%_%b%f%k%m%w&Q&]&a&j&l&m&t&x&{'Q'S'V'a'b'e'g'h'l'q's'w'|(S(Y(](l({)P)T)j)r)u){)|*O*X*]*e*w+S+Z+[+`+b+e+|,P,U,c,o,q,r,s,t,v,w,x,y,{-P$yUOXYZhrtv|}!R!S!T!X!j!l!o!p!q!s!t#]#j#m$P$R$T$W$k$m$|%R%Y%]%_%f%k%m%w&]&a&l&m&t&{'Q'S'V'a'b'e'g'h'l's(Y(](l({)T)j)r)u){)|*O*]*e*w+S+Z+[+`+b+e+|,P,U,c,o,q,r,s,t,v,w,x,{-P$TWOXYZhrv|}!R!S!T!X!j!l#]#j#m$P$R$T$W$k$m$|%R%]%_%f%k%m%w&]&a&l&m&t&{'Q'S'V'a'b'e'g'h'l's(Y(](l({)T)j)r)u){*O*]*e*w+S+Z+[+`+e+|,P,c,w,xQ#|uQ,m,gR,|-O&SdOSXYZehrstvx|}!R!S!T!U!X!c!d!e!f!g!h!i!l!o!p!q!s!t!z!}#R#S#]#j#m$O$P$R$T$W$h$j$k$m$|%R%Y%]%_%b%f%k%m%w&Q&]&a&j&l&m&t&x&{'Q'S'V'a'e'g'h'l'q's'w'|(S(Y(](l({)P)T)j)r)u){)|*O*X*]*e*w+S+Z+[+`+b+e+|,P,U,c,o,q,r,s,t,v,w,x,y,{-PW#pl!O!P$_W#xu&_,g-OQ$a!QQ$q!YQ$r!ZS${!j'bS&^#y#zQ'O$lQ(e&WQ(r&nW(s&p(t(u*kQ(v&rQ)b'XS)c'Z+VS+U)d)eQ+j*fQ+l*hQ+x*}Q+z+PR,j,YR&]#xe!wXY!S!T%_%f's({){*OR%]!vQ!{XQ%x#]Q&f$TR&i$WT,f,U,o!Y!kP!n#i#v$X$g$s$t$u$v$w$x$y%d%i%o%p&b&z(d(n)O)y*Q*S*r+f,uQ&Z#qR'^$rR'a${R%U!m&WcOSXYZehrstvx|}!R!S!T!U!X!c!d!e!f!g!h!i!j!l!o!p!q!s!t!z!}#R#S#]#j#m$O$P$R$T$W$h$j$k$m$|%R%Y%]%_%b%f%k%m%w&Q&]&a&j&l&m&t&x&{'Q'S'V'a'b'e'g'h'l'q's'w'|(S(Y(](l({)P)T)j)r)u){)|*O*X*]*e*w+S+Z+[+`+b+e+|,P,U,c,o,q,r,s,t,v,w,x,y,{-PT#gc#hS#^_#_S#a`#bS#ca#dS#eb#fT*`(`*aT(a%x(cQ$VwR+T)cX$Tw$U$V&hZkOr$m'Q*wXoOr'Q*wQ$n!WQ&v$eQ&w$fQ'Y$pQ']$rQ)U&}Q)['SQ)^'TQ)_'UQ)k'[Q)m'^Q*n({Q*p(|Q*q(}Q*s)SS*u)V)lQ*z)YQ*{)ZQ*|)]Q+o*mQ+p*oQ+r*tQ+s*vQ+y+OQ,]+qQ,_+wQ,`+xR,k,^WoOr'Q*wR#snQ'[$qR)V'OQ+S)cR+|+TQ)l'[R*v)VZmOnr'Q*wQrOR#urQ&`#{R(j&`S%l#Q#}S(T%l(WT(W%o&bQ%`!yS't%`'yR'y%dQ&k$XR(o&kQ%g!|S'}%g(PR(P%iQ(Z%pQ*T(UT*Y(Z*TQ'c$}R)p'cS'f%Q%RY)s'f)t+^,S,dU)t'g'h'iU+^)u)v)wS,S+_+`R,d,TQ#X]R%s#XQ#[^R%u#[Q#__R%y#_Q(^%vS*^(^*_R*_(_Q*a(`R+h*aQ#b`R%{#bQ#daR%|#dQ#fbR%}#fQ#hcR&O#hQ#kfQ&P#iW&S#k&P(m*dQ(m&eR*d,uQ$UwS&g$U&hR&h$VQ&u$cR(y&uQ&X#pR(f&XQ$_!PR&o$_Q*g(sS+k*g,ZR,Z+lQ&s$aR(w&sQ#njR&U#nQ*x)WR+u*xQ(z&vR*l(zQ&y$gS)Q&y)RR)R&zQ'R$nR)X'RQ'W$oS)a'W+QR+Q)bQ+W)gR,O+WWnOr'Q*wR#rnSqOrQ)W'QR+t*wWpOr'Q*wR'P$mYjOr$m'Q*wR&T#m[wOr#m$m'Q*wR&f$T$xPOXYZhrtv|}!R!S!T!X!j!l!o!p!q!s!t#]#j#m$P$R$T$W$k$m$|%R%Y%]%_%f%k%m%w&]&a&l&m&t&{'Q'S'V'a'b'e'g'h'l's(Y(](l({)T)j)r)u){)|*O*]*e*w+S+Z+[+`+b+e+|,P,U,c,o,q,r,s,t,v,w,x,{-PQ!nSQ#ieQ#vsU$Xx%b'wS$g!U$jQ$s!cQ$t!dQ$u!eQ$v!fQ$w!gQ$x!hQ$y!iQ%d!zQ%i!}Q%o#RQ%p#SQ&b$OQ&z$hQ(d&QQ(n&jQ)O&xQ)y'qQ*Q'|Q*S(SQ*r)PQ+f*XR,u,yQ!yXQ!|YQ$e!SQ$f!TW'p%_'s){*OQ'{%fR*o({[fOr#m$m'Q*wd!vXY!S!T%_%f's({){*OQ#QZQ#lhS#}v|Q$[}W$c!R$W&{)TS$o!X$kS$z!j'bQ%Q!lQ%v#]S&R#j(lQ&c$PQ&d$RQ&e$TQ'_$|Q'i%RQ'o%]Q(R%kQ(U%mQ(_%wQ(h&]S(k&a,wQ(p&lQ(q&mQ(x&tQ)]'SQ)`'VQ)n'aQ)q'eQ)v'gQ)w'hS)x'l,xQ*W(YQ*[(]Q+Y)jQ+])rQ+_)uQ+g*]Q+i*eQ+{+SQ,Q+ZQ,R+[Q,T+`Q,X+eQ,a+|Q,b,PR,l,cbTOr#j#m$m&a'Q'l*w#p!uXYZhv|}!R!S!T!X!j!l#]$P$R$T$W$k$|%R%]%_%f%k%m%w&]&l&m&t&{'S'V'a'b'e'g'h's(Y(](l({)T)j)r)u){*O*]*e+S+Z+[+`+e+|,P,c,w,xQ#wtW%V!o!s,r,{Q%W!pQ%X!qQ%Z!tQ%e,qS'k%Y,vQ'm,sQ'n,tQ+a)|Q,W+bS,e,U,oR,}-PU#{u,g-OR(i&_[gOr#m$m'Q*wX!xX#]$T$WQ#VZQ$QvR$Z|Q%a!yQ%h!|Q%n#QQ'_$zQ'z%dQ(Q%iQ(X%oQ([%pQ*U(UQ,V+aQ,i,WR,n,hQ$YxQ'v%bR)}'wQ,h,UR,p,oR#PYR#UZR%P!jQ$}!jR)o'bR%S!lR%x#]Q(b%xR*c(cQ$d!RQ&i$WQ)S&{R*t)TQ#qlQ$]!OQ$`!PR&q$_Q(r&pQ*i(tQ*j(uR+n*kR$b!QXpOr'Q*wQ$i!UR&|$jQ$p!XR&}$kR)i'ZQ)g'ZR+}+V",nodeNames:"⚠ print Comment Script AssignStatement * BinaryExpression BitOp BitOp BitOp BitOp ArithOp ArithOp @ ArithOp ** UnaryExpression ArithOp BitOp AwaitExpression await ParenthesizedExpression ( BinaryExpression or and CompareOp in not is UnaryExpression ConditionalExpression if else LambdaExpression lambda ParamList self VariableName AssignOp , : NamedExpression AssignOp YieldExpression yield from ) TupleExpression ComprehensionExpression async for LambdaExpression ArrayExpression [ ] ArrayComprehensionExpression DictionaryExpression { } DictionaryComprehensionExpression SetExpression SetComprehensionExpression CallExpression ArgList AssignOp MemberExpression . PropertyName Number String FormatString FormatReplacement FormatConversion FormatSpec ContinuedString Ellipsis None Boolean TypeDef AssignOp UpdateStatement UpdateOp ExpressionStatement DeleteStatement del PassStatement pass BreakStatement break ContinueStatement continue ReturnStatement return YieldStatement PrintStatement RaiseStatement raise ImportStatement import as ScopeStatement global nonlocal AssertStatement assert StatementGroup ; IfStatement Body elif WhileStatement while ForStatement TryStatement try except finally WithStatement with FunctionDefinition def ParamList AssignOp TypeDef ClassDefinition class DecoratedStatement Decorator At",maxTerm:236,nodeProps:[[O.group,-14,4,81,83,84,86,88,90,92,94,95,96,98,101,104,"Statement Statement",-23,6,16,19,21,37,38,48,49,53,56,57,60,61,62,63,66,69,70,71,75,76,77,78,"Expression",-9,106,108,111,113,114,118,120,125,127,"Statement"]],skippedNodes:[0,2],repeatNodeCount:33,tokenData:"!E}MgR!^OX$}XY%wY[$}[]%w]p$}pq%wqr(crs*Ust2Otu$}uv4Qvw5Uwx5xxyAWyzAtz{Bb{|Cr|}Df}!OES!O!PFZ!P!QKa!Q!RLq!R![!(P![!]!)i!]!^!*m!^!_!+Z!_!`!,k!`!a!-_!a!b$}!b!c!.l!c!d!/b!d!e!1f!e!h!/b!h!i!8O!i!t!/b!t!u!=b!u!w!/b!w!x!?`!x!}!/b!}#O!@t#O#P!Ab#P#Q!Bc#Q#R!CP#R#S!/b#S#T$}#T#U!/b#U#V!1f#V#Y!/b#Y#Z!8O#Z#f!/b#f#g!=b#g#i!/b#i#j!?`#j#o!/b#o#p!Cs#p#q!D[#q#r!EO#r#s!Ea#s$g$}$g~!/b<r%`R%o`%up%r7[%x!b%z#t%iS%lWO#o%i#p#q%i#r~%i7[%nR%r7[O#o%i#p#q%i#r~%iMg&[Z%o`%up%r7[%x!b%z#t%iS%lW$q1sOX%iXY&}Y[%i[]&}]p%ipq&}q#O%i#O#P'w#P#o%i#p#q%i#r~%iHP'UZ%r7[$q1sOX%iXY&}Y[%i[]&}]p%ipq&}q#O%i#O#P'w#P#o%i#p#q%i#r~%iHP'|V%r7[OY%iYZ&}Z]%i]^&}^#o%i#p#q%i#r~%i<u(tY%o`%up%r7[%x!b%z#t%iS%lWO!_%i!_!`)d!`#T%i#T#U)t#U#f%i#f#g)t#g#h)t#h#o%i#p#q%i#r~%i7_)kRjR%r7[O#o%i#p#q%i#r~%i7_){R!kR%r7[O#o%i#p#q%i#r~%iG{*e]%vp%o`%r7[%x!b%iS%g,XOY+^YZ.{Z]+^]^.{^r+^rs/]s#O+^#O#P0|#P#o+^#o#p1b#p#q+^#q#r1b#r~+^Bm+g]%r7[%lW%g,XOY,`YZ%iZ],`]^%i^r,`rs-`s#O,`#O#P-p#P#o,`#o#p.U#p#q,`#q#r.U#r~,`Be,g]%r7[%g,XOY,`YZ%iZ],`]^%i^r,`rs-`s#O,`#O#P-p#P#o,`#o#p.U#p#q,`#q#r.U#r~,`Be-gR%r7[%g,XO#o%i#p#q%i#r~%iBe-uT%r7[O#o,`#o#p.U#p#q,`#q#r.U#r~,`,X.ZV%g,XOY.UZ].U^r.Urs.ps#O.U#O#P.u#P~.U,X.uO%g,X,X.xPO~.U7d/SR%r7[%lWO#o%i#p#q%i#r~%iEc/dX%r7[%g,XOr.{rs0Ps#O.{#O#P0c#P#o.{#o#p0w#p#q.{#q#r0w#r~.{Ec0YR%m#|%r7[%k,XO#o%i#p#q%i#r~%i7d0hT%r7[O#o.{#o#p0w#p#q.{#q#r0w#r~.{W0|O%lWBm1RT%r7[O#o+^#o#p1b#p#q+^#q#r1b#r~+^,a1iV%lW%g,XOY.UZ].U^r.Urs.ps#O.U#O#P.u#P~.UMg2cXQ1s%o`%up%r7[%x!b%z#t%iS%lWOY3OYZ%iZ]3O]^%i^#o3O#o#p3r#p#q3O#q#r3r#r~3OHP3VXQ1s%r7[OY3OYZ%iZ]3O]^%i^#o3O#o#p3r#p#q3O#q#r3r#r~3O1s3wRQ1sOY3rZ]3r^~3rGz4eT%PQ%o`%up%r7[%x!b%z#t%iS%lWO!_%i!_!`4t!`#o%i#p#q%i#r~%iBd4{R!t,W%r7[O#o%i#p#q%i#r~%iGz5iT$yQ%o`%up%r7[%x!b%z#t%iS%lWO!_%i!_!`4t!`#o%i#p#q%i#r~%iG{6X_%s`%up%r7[%z#t%lW%g,XOY7WYZ:dZ]7W]^:d^r7Wrs:xsw7Wwx;|x#O7W#O#P>n#P#o7W#o#p?t#p#q7W#q#r?S#r~7WFq7e]%r7[%x!b%z#t%iS%g,XOY8^YZ%iZ]8^]^%i^w8^wx-`x#O8^#O#P9^#P#o8^#o#p9r#p#q8^#q#r9r#r~8^Be8e]%r7[%g,XOY8^YZ%iZ]8^]^%i^w8^wx-`x#O8^#O#P9^#P#o8^#o#p9r#p#q8^#q#r9r#r~8^Be9cT%r7[O#o8^#o#p9r#p#q8^#q#r9r#r~8^,X9wV%g,XOY9rZ]9r^w9rwx.px#O9r#O#P:^#P~9r,X:aPO~9r;h:oR%r7[%x!b%z#t%iSO#o%i#p#q%i#r~%iC{;T]%r7[%x!b%iS%g,XOY8^YZ%iZ]8^]^%i^w8^wx-`x#O8^#O#P9^#P#o8^#o#p9r#p#q8^#q#r9r#r~8^Fq<VZ%r7[%z#t%g,XOr:drs<xsw:dwx=[x#O:d#O#P=p#P#o:d#o#p>_#p#q:d#q#r>U#r~:d8r=RR%r7[%x!b%iSO#o%i#p#q%i#r~%iFq=gR%j!f%r7[%z#t%h,XO#o%i#p#q%i#r~%i;h=uT%r7[O#o:d#o#p>U#p#q:d#q#r>U#r~:d%[>_O%x!b%z#t%iS%[>dP%iS#o#p>g%W>nO%x!b%z#tFq>sT%r7[O#o7W#o#p?S#p#q7W#q#r?S#r~7W0e?_V%x!b%z#t%iS%g,XOY9rZ]9r^w9rwx.px#O9r#O#P:^#P~9r0e?{X%iS%g,XOY9rZ]9r^w9rwx.px#O9r#O#P:^#P#o9r#o#p@h#p~9r0a@qV%x!b%z#t%g,XOY9rZ]9r^w9rwx.px#O9r#O#P:^#P~9rG{AkRf,X%o`%up%r7[%x!b%z#t%iS%lWO#o%i#p#q%i#r~%i<uBXR!PR%o`%up%r7[%x!b%z#t%iS%lWO#o%i#p#q%i#r~%iG{BuVT,X%o`%up%r7[%x!b%z#t%iS%lWOz%iz{C[{!_%i!_!`4t!`#o%i#p#q%i#r~%iBeCcT_R%r7[O!_%i!_!`4t!`#o%i#p#q%i#r~%iG{DVT$|,X%o`%up%r7[%x!b%z#t%iS%lWO!_%i!_!`4t!`#o%i#p#q%i#r~%iG{DyRx,X%o`%up%r7[%x!b%z#t%iS%lWO#o%i#p#q%i#r~%iMgEgU$},X%o`%up%r7[%x!b%z#t%iS%lWO!_%i!_!`4t!`!aEy!a#o%i#p#q%i#r~%i<vFQR&U&j%r7[O#o%i#p#q%i#r~%iG{FnV!eQ%o`%up%r7[%x!b%z#t%iS%lWO!O%i!O!PGT!P!Q%i!Q![Gy![#o%i#p#q%i#r~%iBeGYT%r7[O!O%i!O!PGi!P#o%i#p#q%i#r~%iBeGpR!n,X%r7[O#o%i#p#q%i#r~%iBcHQ_!g,V%r7[O!Q%i!Q![Gy![!g%i!g!hIP!h!l%i!l!mKP!m#R%i#R#SGy#S#X%i#X#YIP#Y#^%i#^#_KP#_#o%i#p#q%i#r~%iBcIUX%r7[O{%i{|Iq|}%i}!OIq!O!Q%i!Q![JV![#o%i#p#q%i#r~%iBcIvT%r7[O!Q%i!Q![JV![#o%i#p#q%i#r~%iBcJ^Z!g,V%r7[O!Q%i!Q![JV![!l%i!l!mKP!m#R%i#R#SJV#S#^%i#^#_KP#_#o%i#p#q%i#r~%iBcKWR!g,V%r7[O#o%i#p#q%i#r~%iG{KtV%OR%o`%up%r7[%x!b%z#t%iS%lWO!P%i!P!QLZ!Q!_%i!_!`4t!`#o%i#p#q%i#r~%iBdLbT%QQ%r7[O!_%i!_!`4t!`#o%i#p#q%i#r~%iGyMUm!g,V%o`%up%r7[%x!b%z#t%iS%lWO!O%i!O!P! P!P!Q%i!Q![!!k![!d%i!d!e!#w!e!g%i!g!hIP!h!l%i!l!mKP!m!q%i!q!r!%V!r!z%i!z!{!&_!{#R%i#R#S!!k#S#U%i#U#V!#w#V#X%i#X#YIP#Y#^%i#^#_KP#_#c%i#c#d!%V#d#l%i#l#m!&_#m#o%i#p#q%i#r~%iBc! UT%r7[O!Q%i!Q![! e![#o%i#p#q%i#r~%iBc! l_!g,V%r7[O!Q%i!Q![! e![!g%i!g!hIP!h!l%i!l!mKP!m#R%i#R#S! e#S#X%i#X#YIP#Y#^%i#^#_KP#_#o%i#p#q%i#r~%iBc!!ra!g,V%r7[O!O%i!O!P! P!P!Q%i!Q![!!k![!g%i!g!hIP!h!l%i!l!mKP!m#R%i#R#S!!k#S#X%i#X#YIP#Y#^%i#^#_KP#_#o%i#p#q%i#r~%iBc!#|W%r7[O!Q%i!Q!R!$f!R!S!$f!S#R%i#R#S!$f#S#o%i#p#q%i#r~%iBc!$mW!g,V%r7[O!Q%i!Q!R!$f!R!S!$f!S#R%i#R#S!$f#S#o%i#p#q%i#r~%iBc!%[V%r7[O!Q%i!Q!Y!%q!Y#R%i#R#S!%q#S#o%i#p#q%i#r~%iBc!%xV!g,V%r7[O!Q%i!Q!Y!%q!Y#R%i#R#S!%q#S#o%i#p#q%i#r~%iBc!&dZ%r7[O!Q%i!Q![!'V![!c%i!c!i!'V!i#R%i#R#S!'V#S#T%i#T#Z!'V#Z#o%i#p#q%i#r~%iBc!'^Z!g,V%r7[O!Q%i!Q![!'V![!c%i!c!i!'V!i#R%i#R#S!'V#S#T%i#T#Z!'V#Z#o%i#p#q%i#r~%iGy!(da!g,V%o`%up%r7[%x!b%z#t%iS%lWO!O%i!O!P! P!P!Q%i!Q![!!k![!g%i!g!hIP!h!l%i!l!mKP!m#R%i#R#S!!k#S#X%i#X#YIP#Y#^%i#^#_KP#_#o%i#p#q%i#r~%iMg!)|Ty1s%o`%up%r7[%x!b%z#t%iS%lWO!_%i!_!`!*]!`#o%i#p#q%i#r~%i7_!*dR%YR%r7[O#o%i#p#q%i#r~%iG{!+QR#_,X%o`%up%r7[%x!b%z#t%iS%lWO#o%i#p#q%i#r~%iG{!+nVjR%o`%up%r7[%x!b%z#t%iS%lWO!^%i!^!_!,T!_!`)d!`!a)d!a#o%i#p#q%i#r~%iBd!,[T$zQ%r7[O!_%i!_!`4t!`#o%i#p#q%i#r~%iG{!-OT%X,X%o`%up%r7[%x!b%z#t%iS%lWO!_%i!_!`)d!`#o%i#p#q%i#r~%iG{!-rUjR%o`%up%r7[%x!b%z#t%iS%lWO!_%i!_!`)d!`!a!.U!a#o%i#p#q%i#r~%iBd!.]T${Q%r7[O!_%i!_!`4t!`#o%i#p#q%i#r~%iG{!/RT]Q#uP%o`%up%r7[%x!b%z#t%iS%lWO!_%i!_!`4t!`#o%i#p#q%i#r~%iMg!/wZ%o`%up%r7[%x!b%z#t%iS%lW%f&j%S,XO!Q%i!Q![!0j![!c%i!c!}!0j!}#R%i#R#S!0j#S#T%i#T#o!0j#p#q%i#r$g%i$g~!0jHP!0sZ%r7[%f&j%S,XO!Q%i!Q![!0j![!c%i!c!}!0j!}#R%i#R#S!0j#S#T%i#T#o!0j#p#q%i#r$g%i$g~!0jMg!1{c%o`%up%r7[%x!b%z#t%iS%lW%f&j%S,XOr%irs!3Wsw%iwx!5Ox!Q%i!Q![!0j![!c%i!c!t!0j!t!u!6v!u!}!0j!}#R%i#R#S!0j#S#T%i#T#f!0j#f#g!6v#g#o!0j#p#q%i#r$g%i$g~!0jBe!3_]%r7[%g,XOY,`YZ%iZ],`]^%i^r,`rs!4Ws#O,`#O#P-p#P#o,`#o#p.U#p#q,`#q#r.U#r~,`Be!4_T%r7[%g,XOr%irs!4ns#o%i#p#q%i#r~%iBe!4uR%r7[%k,XO#o%i#p#q%i#r~%iBe!5V]%r7[%g,XOY8^YZ%iZ]8^]^%i^w8^wx!6Ox#O8^#O#P9^#P#o8^#o#p9r#p#q8^#q#r9r#r~8^Be!6VT%r7[%g,XOw%iwx!6fx#o%i#p#q%i#r~%iBe!6mR%r7[%h,XO#o%i#p#q%i#r~%iHP!7P_%r7[%f&j%S,XOr%irs!3Wsw%iwx!5Ox!Q%i!Q![!0j![!c%i!c!}!0j!}#R%i#R#S!0j#S#T%i#T#o!0j#p#q%i#r$g%i$g~!0jMg!8ec%o`%up%r7[%x!b%z#t%iS%lW%f&j%S,XOr%irs!9psw%iwx!:|x!Q%i!Q![!0j![!c%i!c!t!0j!t!u!<Y!u!}!0j!}#R%i#R#S!0j#S#T%i#T#f!0j#f#g!<Y#g#o!0j#p#q%i#r$g%i$g~!0jBe!9wT%r7[%t,XOr%irs!:Ws#o%i#p#q%i#r~%iBe!:]T%r7[Or%irs!:ls#o%i#p#q%i#r~%iBe!:sR%r7[%y,XO#o%i#p#q%i#r~%iBe!;TT%r7[%n,XOw%iwx!;dx#o%i#p#q%i#r~%iBe!;iT%r7[Ow%iwx!;xx#o%i#p#q%i#r~%iBe!<PR%r7[%w,XO#o%i#p#q%i#r~%iHP!<c_%r7[%f&j%S,XOr%irs!9psw%iwx!:|x!Q%i!Q![!0j![!c%i!c!}!0j!}#R%i#R#S!0j#S#T%i#T#o!0j#p#q%i#r$g%i$g~!0jMg!=wg%o`%up%r7[%x!b%z#t%iS%lW%f&j%S,XOr%irs!3Wsw%iwx!5Ox!Q%i!Q![!0j![!c%i!c!h!0j!h!i!<Y!i!t!0j!t!u!6v!u!}!0j!}#R%i#R#S!0j#S#T%i#T#U!0j#U#V!6v#V#Y!0j#Y#Z!<Y#Z#o!0j#p#q%i#r$g%i$g~!0jMg!?u_%o`%up%r7[%x!b%z#t%iS%lW%f&j%S,XOr%irs!3Wsw%iwx!5Ox!Q%i!Q![!0j![!c%i!c!}!0j!}#R%i#R#S!0j#S#T%i#T#o!0j#p#q%i#r$g%i$g~!0jG{!AXR!W,X%o`%up%r7[%x!b%z#t%iS%lWO#o%i#p#q%i#r~%iMg!AgX%r7[OY$}YZ%wZ]$}]^%w^#o$}#o#p!BS#p#q$}#q#r!BS#r~$}&f!BcO%o`%up%x!b%z#t%iS%lW<u!BvR!XR%o`%up%r7[%x!b%z#t%iS%lWO#o%i#p#q%i#r~%iGz!CdT$xQ%o`%up%r7[%x!b%z#t%iS%lWO!_%i!_!`4t!`#o%i#p#q%i#r~%iGy!C|P![Gm%iS%lW#o#p!DP&Y!D[O%o`%up%x!b%z#tGz!DoT$wQ%o`%up%r7[%x!b%z#t%iS%lWO!_%i!_!`4t!`#o%i#p#q%i#r~%i<u!EaO!]7_%o`%up%x!b%z#t%iS%lWGy!EtR%R,V%o`%up%r7[%x!b%z#t%iS%lWO#o%i#p#q%i#r~%i",tokenizers:[K,0,1,2,3,4,5,6,7,8,9,10,H,J],topRules:{Script:[0,3]},specialized:[{term:188,get:t=>tt[t]||-1}],tokenPrec:6067});var it,rt=(it=function(t,e){return(it=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}it(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),nt=function(t){function e(i){var r=t.call(this,i)||this;return r.name="ParseError",Object.setPrototypeOf(r,e.prototype),r}return rt(e,t),e}(Error);function st(t,e,i){throw void 0===i&&(i=""),new nt("Could not parse "+t.from+"–"+t.to+': "'+e.substring(t.from,t.to)+'", '+i)}function Ot(t,e){t.nextSibling()||st(t,e,"Missing token")}function at(t,e,i){Ot(t,e),ot(t,e,i)}function ot(t,e,i){t.node.type.name!==i&&st(t,e,"Expecting "+i+", encountered "+t.node.type.name)}function lt(t,e){t.nextSibling()&&st(t,e,"Trailing expression")}function ft(t,e){switch(t.type.name){case"Boolean":var i=e.substring(t.from,t.to);if("True"===i)return{a:"bool",tag:"bool",val:"1"};if("False"===i)return{a:"bool",tag:"bool",val:"0"};st(t,e,"Unrecognized boolean");case"Number":return{a:"int",tag:"num",val:e.substring(t.from,t.to)};case"None":return{a:"none",tag:"none",val:"0"};case"VariableName":return{tag:"id",name:e.substring(t.from,t.to)};case"CallExpression":t.firstChild();var r=e.substring(t.from,t.to);at(t,e,"ArgList");var n=function(t,e){t.firstChild(),ot(t,e,"("),Ot(t,e);for(var i=[];")"!==t.type.name;)switch(i.push(ft(t,e)),Ot(t,e),t.node.type.name){case",":Ot(t,e);continue;case")":break;default:st(t,e,"Unexpected token")}return lt(t,e),t.parent(),i}(t,e);return lt(t,e),t.parent(),{tag:"app",fn:r,args:n};case"BinaryExpression":t.firstChild();var s=ft(t,e);Ot(t,e);var O=e.substring(t.from,t.to);Ot(t,e);var a=ft(t,e);if(lt(t,e),t.parent(),console.log(O),"+"===O||"-"===O||"*"===O||"//"===O||"%"===O||"=="===O||"!="===O||"<="===O||">="===O||"<"===O||">"===O||"is"===O)return{tag:"binop",op:O,e1:s,e2:a};st(t,e,O+" is not supported");case"UnaryExpression":t.firstChild();var o=e.substring(t.from,t.to);Ot(t,e);var l=ft(t,e);switch(lt(t,e),t.parent(),o){case"-":case"not":return{tag:"uniop",op:o,e:l};default:st(t,e,"Unsupported operator")}case"ParenthesizedExpression":return t.firstChild(),Ot(t,e),l=ft(t,e),at(t,e,")"),lt(t,e),t.parent(),{tag:"paren",e:l};default:st(t,e,"type: "+t.type.name)}}function ht(t,e,i){void 0===i&&(i=!0),t.firstChild(),i?at(t,e,"VariableName"):ot(t,e,"VariableName");var r=e.substring(t.from,t.to);if("int"===r||"bool"===r)return lt(t,e),t.parent(),r;st(t,e,"Unsupported type")}function ut(t,e){switch(t.node.type.name){case"AssignStatement":return t.firstChild(),Ot(t,e),"TypeDef"===t.node.type.name?(t.parent(),"defvar"):(t.parent(),"stmt");case"FunctionDefinition":return"defun";default:return"stmt"}}function ct(t,e){switch(t.node.type.name){case"AssignStatement":t.firstChild();var i=e.substring(t.from,t.to);Ot(t,e);var r="";"TypeDef"===t.node.type.name?r=ht(t,e):st(t,e,"Missing type declaration"),console.log("name: "+i+", type: "+r+", c: "+t),at(t,e,"AssignOp"),Ot(t,e);var n=ft(t,e);if(lt(t,e),t.parent(),"int"===r||"bool"===r||"none"===r){if("num"===n.tag||"bool"===n.tag||"none"===n.tag)return{tag:"defvar",name:i,t:r,value:n};st(t,e,"Declaration has to be literal")}else st(t,e,"Unsupported type");case"FunctionDefinition":t.firstChild(),at(t,e,"VariableName");var s=e.substring(t.from,t.to);at(t,e,"ParamList");var O=function(t,e){t.firstChild();var i=[];for(t.nextSibling();")"!==t.node.type.name;){var r=e.substring(t.from,t.to);at(t,e,"TypeDef");var n=ht(t,e);if(i.push([r,n]),!t.nextSibling())break;","===t.node.type.name&&at(t,e,"VariableName")}return lt(t,e),t.parent(),i}(t,e);Ot(t,e);var a="none";"TypeDef"===t.node.type.name&&(a=ht(t,e,!1),Ot(t,e)),ot(t,e,"Body");var o=dt(t,e,!0);return lt(t,e),t.parent(),{tag:"defun",name:s,params:O,body:o,ret:a}}}function pt(t,e){switch(t.node.type.name){case"AssignStatement":t.firstChild();var i=e.substring(t.from,t.to);at(t,e,"AssignOp"),Ot(t,e);var r=ft(t,e);return lt(t,e),t.parent(),{tag:"define",name:i,value:r};case"PassStatement":return{tag:"pass"};case"ReturnStatement":t.firstChild();var n={tag:"return",expr:{tag:"none",a:"none",val:"0"}};return t.nextSibling()&&t.from!==t.to&&(n={tag:"return",expr:s=ft(t,e)}),lt(t,e),t.parent(),n;case"ExpressionStatement":t.firstChild();var s=ft(t,e);return lt(t,e),t.parent(),{tag:"expr",expr:s};case"IfStatement":t.firstChild();var O=Qt(t,e);return 1!==O.length&&st(t,e,"Too many if statements, weird"),lt(t,e),t.parent(),O[0];case"WhileStatement":t.firstChild(),Ot(t,e);var a=ft(t,e);Ot(t,e);var o=dt(t,e,!1).stmt;return lt(t,e),t.parent(),{tag:"while",cond:a,body:o};default:st(t,e,"type: "+t.type.name)}}function Qt(t,e){switch(e.substring(t.from,t.to)){case"if":case"elif":Ot(t,e);var i=ft(t,e);Ot(t,e);var r=dt(t,e,!1).stmt,n=[];return t.nextSibling()&&(n=Qt(t,e)),[{tag:"if",cond:i,yes:r,no:n}];case"else":return Ot(t,e),dt(t,e,!1).stmt}}function dt(t,e,i){var r=!1,n=[],s=[];for(t.firstChild();t.nextSibling();)if(r)"stmt"!==ut(t,e)?st(t,e,"Declaration cannot be after Statement"):t.from!==t.to&&s.push(pt(t,e));else switch(ut(t,e)){case"defvar":i?n.push(ct(t,e)):st(t,e,"Can't have variable declaration here");continue;case"defun":st(t,e,"Nested function definition not allowed");case"stmt":r=!0,t.from!==t.to&&s.push(pt(t,e));continue}return lt(t,e),t.parent(),{tag:"program",def:n,stmt:s}}function St(t){switch(t.tag){case"none":return"None";case"bool":return"1"===t.val?"True":"False";case"num":return t.val;case"id":return t.name;case"app":return t.fn+"("+t.args.map(St)+")";case"binop":return St(t.e1)+" "+t.op+" "+St(t.e2);case"uniop":return t.op+" "+St(t.e)}}function $t(t){return function(t,e){switch(t.node.type.name){case"Script":var i=[],r=[],n=!1;t.firstChild();do{n?"stmt"!==ut(t,e)?st(t,e,"Declaration cannot be after Statement"):r.push(pt(t,e)):"stmt"!==ut(t,e)?i.push(ct(t,e)):(n=!0,r.push(pt(t,e)))}while(t.nextSibling());return{tag:"program",def:i,stmt:r};default:st(t,e,"type: "+t.type.name)}}(et.parse(t).cursor(),t)}var gt=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function r(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(r.prototype=i.prototype,new r)}}(),mt=function(){return(mt=Object.assign||function(t){for(var e,i=1,r=arguments.length;i<r;i++)for(var n in e=arguments[i])Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t}).apply(this,arguments)},xt=function(t){function e(i){var r=t.call(this,i)||this;return r.name="TypeError",Object.setPrototypeOf(r,e.prototype),r}return gt(e,t),e}(Error),yt=function(t){function e(i){var r=t.call(this,i)||this;return r.name="NumOfArgError",Object.setPrototypeOf(r,e.prototype),r}return gt(e,t),e}(Error),bt=function(t){function e(i){var r=t.call(this,i)||this;return r.name="ReferenceError",Object.setPrototypeOf(r,e.prototype),r}return gt(e,t),e}(Error);function Pt(t){if(0===t.length)throw new Error("Array has to have at least one element");return t[t.length-1]}function Lt(t){throw new bt(t+" is not defined.")}function Xt(t){throw new bt("Duplicate declaration of "+t)}function Ut(t,e){t.a!==e&&function(t,e,i){throw new xt("expression: "+St(t)+", expecting "+e+", got "+i)}(t,e,t.a)}function vt(t,e,i){e.length!=i&&function(t,e,i){throw new yt(t+" expects "+e+" arguments but got "+i)}(t,i,e.length)}function qt(t,e){if(e.get(t))return e.get(t);Lt(t)}function wt(t,e,i){switch(t.tag){case"bool":return mt(mt({},t),{a:"bool"});case"num":return mt(mt({},t),{a:"int"});case"none":return mt(mt({},t),{a:"none"});case"id":return mt(mt({},t),{a:qt(t.name,i).a});case"binop":switch(t.op){case"+":case"-":case"*":case"//":case"%":var r=wt(t.e1,e,i),n=wt(t.e2,e,i);return Ut(r,"int"),Ut(n,"int"),mt(mt({},t),{a:"int",e1:r,e2:n});case"==":case"!=":case"<=":case">=":case"<":case">":return r=wt(t.e1,e,i),Ut(n=wt(t.e2,e,i),r.a),mt(mt({},t),{a:"bool",e1:r,e2:n});case"is":var s=wt(t.e1,e,i);if("none"!==t.e2.tag)throw new xt('Rhs of "is" can only be None');return"none"===s.a?{tag:"bool",a:"bool",val:"1"}:{tag:"bool",a:"bool",val:"0"};default:return t}case"uniop":switch(t.op){case"-":return Ut(O=wt(t.e,e,i),"int"),mt(mt({},t),{a:"int",e:O});case"not":var O;return Ut(O=wt(t.e,e,i),"bool"),mt(mt({},t),{a:"bool",e:O});default:return t}case"app":switch(t.fn){case"print":vt(t.fn,t.args,1);var a=wt(t.args[0],e,i);return mt(mt({},t),{a:"none",args:[a]});case"abs":return vt(t.fn,t.args,1),Ut(a=wt(t.args[0],e,i),"int"),mt(mt({},t),{a:"int",args:[a]});case"max":case"min":case"pow":vt(t.fn,t.args,2);var o=wt(t.args[0],e,i),l=wt(t.args[1],e,i);return Ut(o,"int"),Ut(l,"int"),mt(mt({},t),{a:"int",args:[o,l]});default:e.has(t.fn)||Lt(t.fn);var f=[],h=e.get(t.fn),u=h[0],c=h[1];return vt(t.fn,t.args,u.length),t.args.forEach((function(t,r){var n=wt(t,e,i);Ut(n,u[r]),f.push(n)})),mt(mt({},t),{a:c,args:f})}case"paren":var p=wt(t.e,e,i);return mt(mt({},t),{a:p.a,e:p})}}function Rt(t,e,i,r){switch(t.tag){case"define":var n=wt(t.value,e,i),s=qt(t.name,i).a;return s!==n.a&&function(t,e,i){throw new xt("variable: "+t+" with type "+e+" cannot be assigned value of type "+i)}(t.name,s,n.a),mt(mt({},t),{value:n});case"expr":var O=wt(t.expr,e,i);return mt(mt({},t),{expr:O});case"pass":return t;case"return":return O=wt(t.expr,e,i),r&&Ut(O,r),mt(mt({},t),{expr:O});case"if":Ut(l=wt(t.cond,e,i),"bool");var a=t.yes.map((function(t){return Rt(t,e,i,r)})),o=t.no.map((function(t){return Rt(t,e,i,r)}));return mt(mt({},t),{cond:l,yes:a,no:o});case"while":var l;Ut(l=wt(t.cond,e,i),"bool");var f=t.body.map((function(t){return Rt(t,e,i,r)}));return mt(mt({},t),{cond:l,body:f})}}function kt(t,e){for(var i=new Map,r=new Map,n=new Map,s=new Map,O=0,a=t;O<a.length;O++){var o=a[O];switch(o.tag){case"defvar":i.get(o.name)?Xt(o.name):(Ut(wt(o.value,n,s),o.t),e?i.set(o.name,{tag:"local",a:o.t}):i.set(o.name,{tag:"global",a:o.t}));continue;case"defun":if(r.get(o.name))Xt(o.name);else{var l=[o.params.map((function(t){return t[1]})),o.ret];r.set(o.name,l)}}}return[r,i]}function Tt(t){switch(t.tag){case"defvar":throw new Error("functionLocalEnv called on defvar: "+t);case"defun":for(var e=new Map,i=0,r=0,n=t.params;r<n.length;r++){var s=n[r];if("int"!=s[1]&&"bool"!=s[1])throw new Error("Unrecognized parameter type, should be impossible.");e.set(s[0],{tag:"param",a:s[1],idx:i}),i+=1}var O=kt(t.body.def,!0);return O[0],O[1].forEach((function(t,i){e.get(i)?Xt(i):e.set(i,t)})),e}}function _t(t,e,i){switch(t.tag){case"define":case"expr":case"pass":return"none";case"return":return wt(t.expr,e,i).a;case"if":var r=_t(Pt(t.yes),e,i),n=_t(Pt(t.no),e,i);if(r!==n)throw new xt("Two branches have different return type, one is "+r+", one is "+n);return r;case"while":return _t(Pt(t.body),e,i)}}function jt(t,e){var i=new Map(t);return e.forEach((function(t,e){i.set(e,t)})),i}function Gt(t){for(var e=[],i=0,r=t;i<r.length;i++){var n=r[i];e=e.concat(n)}return e}function Et(t){var e=function(t){for(var e=kt(t.def,!1),i=e[0],r=e[1],n=function(t,e){for(var i=kt(t,!1),r=i[0],n=i[1],s=[],O=0,a=t;O<a.length;O++){var o=a[O];switch(o.tag){case"defvar":s.push(o);continue;case"defun":for(var l=jt(n,Tt(o)),f=[],h=0,u=o.body.stmt;h<u.length;h++){var c=u[h];console.log(c),f.push(Rt(c,r,l,o.ret))}var p=mt(mt({},o.body),{stmt:f});s.push(mt(mt({},o),{body:p}));var Q=_t(f[f.length-1],r,l);if(Q!==o.ret)throw new xt("Function is declared to return "+o.ret+", but the actual return type is "+Q)}}return s}(t.def),s=[],O=0,a=t.stmt;O<a.length;O++){var o=a[O],l=new Map(r),f=Rt(o,new Map(i),l,!1);s.push(f)}return[i,r,mt(mt({},t),{def:n,stmt:s})]}($t(t)),i=(e[0],e[1]),r=e[2];console.log("Typed:"),console.log(r);for(var n=function(t,e){for(var i=[],r=0,n=t;r<n.length;r++){var s=n[r];i=i.concat(Wt(s,e))}return i.join("\n")}(r.def,i),s=[],O=0,a=r.stmt;O<a.length;O++){var o=a[O];s=s.concat(Vt(o,i,!0))}return n+'\n(func (export "exported_func") (result i32)\n\t(local $ret i32)\n\t(i32.const 0)\n\t(local.set $ret)\n'+s.join("\n\t\t")+"\n\t(local.get $ret))"}function Vt(t,e,i){switch(void 0===i&&(i=!1),t.tag){case"define":var r=zt(t.value,e),n=e.get(t.name);if(!n)throw new Error("Coudln't find variable "+t.name+" at compile time");return"global"===n.tag?r.concat(["(global.set $"+t.name+")"]):r.concat(["(local.set $"+t.name+")"]);case"expr":var s=zt(t.expr,e);return i?s.concat(["(local.set $ret)"]):s.concat(["(drop)"]);case"pass":return[];case"return":return zt(t.expr,e).concat(["(return)"]);case"if":var O=zt(t.cond,e),a=Gt(t.yes.map((function(t){return Vt(t,e,i)}))).join("\n"),o=Gt(t.no.map((function(t){return Vt(t,e,i)}))).join("\n");return O.push("(if\n(then "+a+")\n(else "+o+"))"),O;case"while":return["(block\n(loop\n"+zt(t.cond,e).join("\n")+"\n(i32.const 0)\n(i32.eq)\n(br_if 1)\n"+Gt(t.body.map((function(t){return Vt(t,e,i)}))).join("\n")+"\n(br 0)))"]}}function Wt(t,e){switch(t.tag){case"defvar":return["(global $"+t.name+" (mut i32) "+zt(t.value,e)+")"];case"defun":for(var i=[],r=0,n=t.params;r<n.length;r++){var s=n[r];i=i.concat(["(param $"+s[0]+" i32)"])}for(var O=i.join(" "),a=[],o=0,l=t.body.def;o<l.length;o++){var f=l[o];switch(f.tag){case"defvar":a.push("(local $"+f.name+" i32)"),(a=a.concat(zt(f.value,e))).push("(local.set $"+f.name+")");case"defun":new Error("Nested function in compilation time, shouldn't happen")}}for(var h=a.join("\n\t"),u=jt(e,Tt(t)),c=[],p=0,Q=t.body.stmt;p<Q.length;p++){var d=Q[p];c=c.concat(Vt(d,u))}var S=c.join("\n\t");return["(func $"+t.name+" "+O+" (result i32)\n\t"+h+"\n\t"+S+"\n(unreachable)\n(i32.const 0)\n(return))"]}}function Yt(t){switch(t){case"+":return"i32.add";case"-":return"i32.sub";case"*":return"i32.mul";case"//":return"i32.div_s";case"%":return"i32.rem_s";case"==":return"i32.eq";case"!=":return"i32.ne";case"<=":return"i32.le_s";case">=":return"i32.ge_s";case"<":return"i32.lt_s";case">":return"i32.gt_s";case"is":throw new Error("We shouldn't see 'is' in compile time")}}function zt(t,e){switch(t.tag){case"app":for(var i=[],r=0,n=t.args;r<n.length;r++){var s=n[r];i=i.concat(zt(s,e))}var O=t.fn;return"print"===t.fn&&"bool"===t.args[0].a?O="print_bool":"print"===t.fn&&"none"===t.args[0].a&&(O="print_none"),i.concat(["(call $"+O+")"]);case"binop":return zt(t.e1,e).concat(zt(t.e2,e)).concat(["("+Yt(t.op)+")"]);case"uniop":return function(t,e,i){switch(t){case"-":return zt({tag:"num",val:"0"},i).concat(zt(e,i)).concat(["(i32.sub)"]);case"not":return zt(e,i).concat(["(i32.const 0)","(i32.eq)"])}}(t.op,t.e,e);case"id":var a=e.get(t.name);if(!a)throw console.log("Env:"),console.log(e),new Error("Coudln't find variable "+t.name+" at compile time");switch(a.tag){case"global":return["(global.get $"+t.name+")"];case"local":case"param":return["(local.get $"+t.name+")"]}case"num":case"none":case"bool":return["(i32.const "+t.val+")"];case"paren":return zt(t.e,e)}}var Ft={imports:{print:function(t){console.log("Logging from WASM: ",t);var e=document.createElement("pre");return document.getElementById("output").appendChild(e),e.innerText=t,t},print_bool:function(t){console.log("Logging from WASM: ",t);var e=document.createElement("pre");if(document.getElementById("output").appendChild(e),1===t)e.innerText="True";else{if(0!==t)throw new Error("print_bool called with "+t+", impossible");e.innerText="False"}return t},print_none:function(t){console.log("Logging from WASM: ",t);var e=document.createElement("pre");return document.getElementById("output").appendChild(e),e.innerText="None",t},abs:Math.abs,max:Math.max,min:Math.min,pow:Math.pow}};if("undefined"!=typeof process){var Zt=process.on;process.on=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return"uncaughtException"===t[0]?void 0:Zt.apply(process,t)}}document.addEventListener("DOMContentLoaded",(function(){document.getElementById("run").addEventListener("click",(function(t){var e=document.getElementById("user-code");document.getElementById("output").innerHTML="",""!==e.value.trim()&&function(t,e){return r=this,n=void 0,O=function(){var r,n,s,O,a,o,l;return function(t,e){var i,r,n,s,O={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return s={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function a(s){return function(a){return function(s){if(i)throw new TypeError("Generator is already executing.");for(;O;)try{if(i=1,r&&(n=2&s[0]?r.return:s[0]?r.throw||((n=r.return)&&n.call(r),0):r.next)&&!(n=n.call(r,s[1])).done)return n;switch(r=0,n&&(s=[2&s[0],n.value]),s[0]){case 0:case 1:n=s;break;case 4:return O.label++,{value:s[1],done:!1};case 5:O.label++,r=s[1],s=[0];continue;case 7:s=O.ops.pop(),O.trys.pop();continue;default:if(!((n=(n=O.trys).length>0&&n[n.length-1])||6!==s[0]&&2!==s[0])){O=0;continue}if(3===s[0]&&(!n||s[1]>n[0]&&s[1]<n[3])){O.label=s[1];break}if(6===s[0]&&O.label<n[1]){O.label=n[1],n=s;break}if(n&&O.label<n[2]){O.label=n[2],O.ops.push(s);break}n[2]&&O.ops.pop(),O.trys.pop();continue}s=e.call(t,O)}catch(t){s=[6,t],r=0}finally{i=n=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,a])}}}(this,(function(f){switch(f.label){case 0:return[4,i()()];case 1:return r=f.sent(),n=$t(t),console.log("Parsed:"),console.log(n),s=Et(t),O=e.importObject,a='(module\n    (func $print (import "imports" "print") (param i32) (result i32))\n    (func $print_bool (import "imports" "print_bool") (param i32) (result i32))\n    (func $print_none (import "imports" "print_none") (param i32) (result i32))\n    (func $abs (import "imports" "abs") (param i32) (result i32))\n    (func $max (import "imports" "max") (param i32 i32) (result i32))\n    (func $min (import "imports" "min") (param i32 i32) (result i32))\n    (func $pow (import "imports" "pow") (param i32 i32) (result i32))\n    '+s+")",console.log("Compiled:\n"+a),o=r.parseWat("test.wat",a),l=o.toBinary({}),[4,WebAssembly.instantiate(l.buffer,O)];case 2:return[2,f.sent().instance.exports.exported_func()]}}))},new((s=void 0)||(s=Promise))((function(t,e){function i(t){try{o(O.next(t))}catch(t){e(t)}}function a(t){try{o(O.throw(t))}catch(t){e(t)}}function o(e){var r;e.done?t(e.value):(r=e.value,r instanceof s?r:new s((function(t){t(r)}))).then(i,a)}o((O=O.apply(r,n||[])).next())}));var r,n,s,O}(e.value,{importObject:Ft}).then((function(t){!function(t){if(void 0!==t){var e=document.createElement("pre");document.getElementById("output").appendChild(e),e.innerText=String(t)}else console.log("skip")}(t),console.log("run finished")})).catch((function(t){var e,i;e=t,i=document.createElement("pre"),document.getElementById("output").appendChild(i),i.setAttribute("style","color: red"),i.innerText=String(e),console.log("run failed",t)}))}))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,